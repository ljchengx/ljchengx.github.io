<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ljchengx.cn/"/>
  <updated>2021-03-09T07:51:38.448Z</updated>
  <id>http://www.ljchengx.cn/</id>
  
  <author>
    <name>ljchengx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker系列之常用命令</title>
    <link href="http://www.ljchengx.cn/2021/03/09/Docker%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.ljchengx.cn/2021/03/09/Docker%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-03-09T11:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version # 显示版本信息</span><br><span class="line">docker info   # 系统信息</span><br><span class="line">docker 命令 --help #万能命令</span><br></pre></td></tr></table></figure><p>帮助文档地址：<a href="https://docs.docker.com/engine/reference" target="_blank" rel="noopener">https://docs.docker.com/engine/reference</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong> 查看所有本地的主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-11-centos ~]#  docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   10 hours ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG   镜像的标签</span><br><span class="line">IMAGE ID   镜像的Id</span><br><span class="line">CREATED    镜像的创建时间</span><br><span class="line">SIZE   镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">-a 全部镜像</span><br><span class="line">-q 只显示Id</span><br></pre></td></tr></table></figure><p><strong>docker search</strong> 搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-11-centos ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10578     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   3957      [OK]  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项 docker serach --<span class="built_in">help</span></span></span><br><span class="line">--filter=STARS=5000  # 结果是STARS大于5000</span><br><span class="line">[root@VM-0-11-centos ~]# docker search mysql  --filter=STARS=5000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   10578     [OK]</span><br></pre></td></tr></table></figure><p><strong>docker pull</strong> 下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名称 可以指定Tag 版本号</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker pull mysql</span><br><span class="line">Using default tag: latest           # 如果不写tag 默认latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">a076a628af6f: Pull complete         # 分层下载  docker images核心  联合文件系统</span><br><span class="line">f6c208f3f991: Pull complete </span><br><span class="line">88a9455a9165: Pull complete </span><br><span class="line">406c9b8427c6: Pull complete </span><br><span class="line">7c88599c0b25: Pull complete </span><br><span class="line">25b5c6debdaf: Pull complete </span><br><span class="line">43a5816f1617: Pull complete </span><br><span class="line">1a8c919e89bf: Pull complete </span><br><span class="line">9f3cf4bd1a07: Pull complete </span><br><span class="line">80539cea118d: Pull complete </span><br><span class="line">201b3cad54ce: Pull complete </span><br><span class="line">944ba37e1c06: Pull complete </span><br><span class="line">Digest: sha256:feada149cb8ff54eade1336da7c1d080c4a1c7ed82b5e320efb5beebed85ae8c # 签名信息</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实地址 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等价于它 </span></span><br><span class="line">docker pull mysql </span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">a076a628af6f: Already exists </span><br><span class="line">f6c208f3f991: Already exists </span><br><span class="line">88a9455a9165: Already exists </span><br><span class="line">406c9b8427c6: Already exists </span><br><span class="line">7c88599c0b25: Already exists </span><br><span class="line">25b5c6debdaf: Already exists </span><br><span class="line">43a5816f1617: Already exists </span><br><span class="line">1831ac1245f4: Pull complete </span><br><span class="line">37677b8c1f79: Pull complete </span><br><span class="line">27e4ac3b0f6e: Pull complete </span><br><span class="line">7227baa8c445: Pull complete </span><br><span class="line">Digest: sha256:b3d1eff023f698cd433695c9506171f0d08a8f92a0c8063c1a4d9db9a55808df</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210306173329396.png" alt="image-20210306173329396"></p><p><strong>docker rmi</strong> 删除命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像Id # 删除指定的镜像 </span><br><span class="line">docker rmi -f $(docker images -aq) # 删除全部镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>说明：我们有了镜像才可以创建容器，linux 下载一个 centos镜像来测试学习</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name="Name" 容器名字 tomcat01 tomcat02</span><br><span class="line">-d  后台方式运行</span><br><span class="line">-it  使用交互方式运行 进入容器查看内容</span><br><span class="line">-P  指定容器的端口 -p 8080:8080</span><br><span class="line">-p 主机端口:容器端口 （常用）</span><br><span class="line">-p 容器端口</span><br><span class="line">-p      随机指定端口 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试 启动并进入容器</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@17ad4c340398 /]# ls  查看容器内的centos 基础版本 很多命令不完善 </span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@17ad4c340398 /]# exit </span><br><span class="line">exit</span><br><span class="line">[root@VM-0-11-centos /]# ls</span><br><span class="line">bin  boot  data  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps</span></span><br><span class="line">-a   # 列出当前正在运行的容器 +带出历史运行过的容器</span><br><span class="line">-n=? # 显示最近创建的容器</span><br><span class="line">-q   # 只显示容器的编号</span><br><span class="line">[root@VM-0-11-centos /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-11-centos /]# docker ps -a</span><br><span class="line">17ad4c340398   centos         "/bin/bash"   4 minutes ago   Exited (0) 2 minutes ago         </span><br><span class="line">e684eccc0807   d1165f221234   "/hello"      2 days ago      Exited (0) 2 days ago</span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit # 退出容器</span><br><span class="line">Ctrl + P + Q # 退出不停止</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id                 # 删除指定容器  不能删除正在运行的容器   </span><br><span class="line">docker rm -f $(docker ps -aq)    # 删除所有的容器 </span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有的容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id    # 启动</span><br><span class="line">docker restart 容器id  # 重启</span><br><span class="line">docker stop 容器id  # 停止</span><br><span class="line">docker kill 容器id     # 杀进程</span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a><strong>常用其他命令</strong></h2><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 docker run -d 镜像名 后台启动</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker run -d centos</span><br><span class="line">d269c3553f1b40ff62ea5a23635ff330cb28f857c2d8c10073c95545b56dffcc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过docker ps 发现停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见坑 容器使用后台运行 就必须要有一个前台进程 docker发现没有应用 就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx 容器启动后 发现自己没有服务 就会立即停止 就是没有程序了</span></span><br></pre></td></tr></table></figure><p><strong>常看日志命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker logs 日志命令  </span></span><br><span class="line">docker logs -tf --tail 10 容器 没有日志</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编写脚本</span></span><br><span class="line"> [root@VM-0-11-centos ~]# docker run -d centos /bin/sh -c "while true;do echo ljchengx;sleep 2;done"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     </span><br><span class="line">c6d3be37906b   centos    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志 指定行数</span></span><br><span class="line">-tf </span><br><span class="line">-- tail count  显示的行数</span><br><span class="line">[root@VM-0-11-centos ~]# docker logs -tf --tail 10 c6d3be37906b</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示全部</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker logs -tf c6d3be37906b</span><br></pre></td></tr></table></figure><p><strong>查看进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> top 命令</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker top c6d3be37906b</span><br><span class="line">UID                 PID                 PPID                C                   STIME             </span><br><span class="line">root                17058               17035               0                   10:07          </span><br><span class="line">root                31240               17058               0                   10:17</span><br></pre></td></tr></table></figure><p>**查看元数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker inspect 容器Id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker inspect c6d3be37906b</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "c6d3be37906be8467a4cbb8f4d25f48176b406f9e9161ab85a738e3e9a7674fe",</span><br><span class="line">        "Created": "2021-03-09T02:07:54.08862076Z",</span><br><span class="line">        "Path": "/bin/sh",</span><br><span class="line">        "Args": [</span><br><span class="line">            "-c",</span><br><span class="line">            "while true;do echo ljchengx;sleep 2;done"</span><br><span class="line">        ],</span><br><span class="line">        "State": &#123;</span><br><span class="line">            "Status": "running",</span><br><span class="line">            "Running": true,</span><br><span class="line">            "Paused": false,</span><br><span class="line">            "Restarting": false,</span><br><span class="line">            "OOMKilled": false,</span><br><span class="line">            "Dead": false,</span><br><span class="line">            "Pid": 17058,</span><br><span class="line">            "ExitCode": 0,</span><br><span class="line">            "Error": "",</span><br><span class="line">            "StartedAt": "2021-03-09T02:07:54.429353159Z",</span><br><span class="line">            "FinishedAt": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Image": "sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55",</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/c6d3be37906be8467a4cbb8f4d25f48176b406f9e9161ab85a738e3e9a7674fe/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/c6d3be37906be8467a4cbb8f4d25f48176b406f9e9161ab85a738e3e9a7674fe/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/c6d3be37906be8467a4cbb8f4d25f48176b406f9e9161ab85a738e3e9a7674fe/hosts",</span><br><span class="line">        "LogPath": "/var/lib/docker/containers/c6d3be37906be8467a4cbb8f4d25f48176b406f9e9161ab85a738e3e9a7674fe/c6d3be37906be8467a4cbb8f4d25f48176b406f9e9161ab85a738e3e9a7674fe-json.log",</span><br><span class="line">        "Name": "/gallant_jemison",</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2",</span><br><span class="line">        "Platform": "linux",</span><br><span class="line">        "MountLabel": "",</span><br><span class="line">        "ProcessLabel": "",</span><br><span class="line">        "AppArmorProfile": "",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": &#123;</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": &#123;</span><br><span class="line">                "Type": "json-file",</span><br><span class="line">                "Config": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": &#123;&#125;,</span><br><span class="line">            "RestartPolicy": &#123;</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            &#125;,</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "CgroupnsMode": "host",</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "private",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": [],</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DeviceCgroupRules": null,</span><br><span class="line">            "DeviceRequests": null,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "KernelMemoryTCP": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": null,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": null,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0,</span><br><span class="line">            "MaskedPaths": [</span><br><span class="line">                "/proc/asound",</span><br><span class="line">                "/proc/acpi",</span><br><span class="line">                "/proc/kcore",</span><br><span class="line">                "/proc/keys",</span><br><span class="line">                "/proc/latency_stats",</span><br><span class="line">                "/proc/timer_list",</span><br><span class="line">                "/proc/timer_stats",</span><br><span class="line">                "/proc/sched_debug",</span><br><span class="line">                "/proc/scsi",</span><br><span class="line">                "/sys/firmware"</span><br><span class="line">            ],</span><br><span class="line">            "ReadonlyPaths": [</span><br><span class="line">                "/proc/bus",</span><br><span class="line">                "/proc/fs",</span><br><span class="line">                "/proc/irq",</span><br><span class="line">                "/proc/sys",</span><br><span class="line">                "/proc/sysrq-trigger"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/d5315d260b6f52455014e1a6bc5275a9f81ca40586b33bdf30bb25f6a38835aa-init/diff:/var/lib/docker/overlay2/93fbbcebc66cf30fe7524759b101b0ec71ee5de3c3e12c884988e10ea8b94a0a/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/d5315d260b6f52455014e1a6bc5275a9f81ca40586b33bdf30bb25f6a38835aa/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/d5315d260b6f52455014e1a6bc5275a9f81ca40586b33bdf30bb25f6a38835aa/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/d5315d260b6f52455014e1a6bc5275a9f81ca40586b33bdf30bb25f6a38835aa/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mounts": [],</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "c6d3be37906b",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "while true;do echo ljchengx;sleep 2;done"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "centos",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;</span><br><span class="line">                "org.label-schema.build-date": "20201204",</span><br><span class="line">                "org.label-schema.license": "GPLv2",</span><br><span class="line">                "org.label-schema.name": "CentOS Base Image",</span><br><span class="line">                "org.label-schema.schema-version": "1.0",</span><br><span class="line">                "org.label-schema.vendor": "CentOS"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "NetworkSettings": &#123;</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "79bdc9c626a1158ae89f85850a2e1f1388c9263d3a1da8567d04e470dce27a9f",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": &#123;&#125;,</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/79bdc9c626a1",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "13c3c223789749fc5b64c10fc35992d1e0df64dfa9cb73691eea8f6d51317522",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.2",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">            "Networks": &#123;</span><br><span class="line">                "bridge": &#123;</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "9a1d22b0ff0846b37b84fd7179511a6a6065f1c6becd2833f9a21b74f28d6bf2",</span><br><span class="line">                    "EndpointID": "13c3c223789749fc5b64c10fc35992d1e0df64dfa9cb73691eea8f6d51317522",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.2",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">                    "DriverOpts": null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>进入当前容器的命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 进入</span></span><br><span class="line">docker exec -it 容器Id baseshell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line">c6d3be37906b   centos    "/bin/sh -c 'while t…"   4 hours ago   Up 4 hours             gallant_jemison</span><br><span class="line">[root@VM-0-11-centos ~]# docker exec -it c6d3be37906b /bin/bash</span><br><span class="line">[root@c6d3be37906b /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@c6d3be37906b /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 02:07 ?        00:00:01 /bin/sh -c while true;do echo ljchengx;sleep 2;done</span><br><span class="line">root      6656     0  0 05:49 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      6682     1  0 05:50 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 2</span><br><span class="line">root      6683  6656  0 05:50 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器Id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入正在执行的</span></span><br><span class="line">[root@VM-0-11-centos ~]# docker attach c6d3be37906b</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 区别</span></span><br><span class="line">exec 新终端</span><br><span class="line">attach 打开正在运行的终端</span><br></pre></td></tr></table></figure><p><strong>容器内拷贝文件到主机</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker cp 容器Id:路径/文件名 /主机路径</span></span><br><span class="line"></span><br><span class="line">[root@VM-0-11-centos home]# docker attach ecf8bbccec70</span><br><span class="line">[root@ecf8bbccec70 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@ecf8bbccec70 /]# cd /home</span><br><span class="line">[root@ecf8bbccec70 home]# touch test.java    </span><br><span class="line">[root@ecf8bbccec70 home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@ecf8bbccec70 home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@VM-0-11-centos home]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                      PORTS     NAMES</span><br><span class="line">ecf8bbccec70   centos    "/bin/bash"   7 minutes ago   Exited (0) 30 seconds ago             practical_panini</span><br><span class="line">[root@VM-0-11-centos home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-0-11-centos home]# docker cp ecf8bbccec70:/home/test.java /home</span><br><span class="line">[root@VM-0-11-centos home]# ls</span><br><span class="line">ljchengx.java  test.java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝属于手动过程</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210309141555377.png" alt="image-20210309141555377"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker version 查看docker的版本号，包括客户端、服务端、依赖的Go等</span><br><span class="line">docker info 查看系统(docker)层面信息，包括管理的images, containers数等</span><br><span class="line">docker search &lt;image&gt; 在docker index中搜索image</span><br><span class="line">docker pull &lt;image&gt; 从docker registry server 中下拉image</span><br><span class="line">docker push &lt;image|repository&gt; 推送一个image或repository到registry</span><br><span class="line">docker push &lt;image|repository&gt;:TAG 同上，指定tag</span><br><span class="line">docker inspect &lt;image|container&gt; 查看image或container的底层信息</span><br><span class="line">docker images TODO filter out the intermediate image layers (intermediate image layers 是什么)</span><br><span class="line">docker images -a 列出所有的images</span><br><span class="line">docker ps 默认显示正在运行中的container</span><br><span class="line">docker ps -l 显示最后一次创建的container，包括未运行的</span><br><span class="line">docker ps -a 显示所有的container，包括未运行的</span><br><span class="line">docker logs &lt;container&gt; 查看container的日志，也就是执行命令的一些输出</span><br><span class="line">docker rm &lt;container...&gt; 删除一个或多个container</span><br><span class="line">docker rm `docker ps -a -q` 删除所有的container</span><br><span class="line">docker ps -a -q | xargs docker rm 同上, 删除所有的container</span><br><span class="line">docker rmi &lt;image...&gt; 删除一个或多个image</span><br><span class="line">docker start/stop/restart &lt;container&gt; 开启/停止/重启container</span><br><span class="line">docker start -i &lt;container&gt; 启动一个container并进入交互模式</span><br><span class="line">docker attach &lt;container&gt; attach一个运行中的container</span><br><span class="line">docker run &lt;image&gt; &lt;command&gt; 使用image创建container并执行相应命令，然后停止</span><br><span class="line">docker run -i -t &lt;image&gt; /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash</span><br><span class="line">docker run -i -t -p &lt;host_port:contain_port&gt; 将container的端口映射到宿主机的端口</span><br><span class="line">docker commit &lt;container&gt; [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选</span><br><span class="line">docker build &lt;path&gt; 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image</span><br><span class="line">docker build -t repo[:tag] 同上，可以指定repo和可选的tag</span><br><span class="line">docker build - &lt; &lt;dockerfile&gt; 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image</span><br><span class="line">docker port &lt;container&gt; &lt;container port&gt; 查看本地哪个端口映射到container的指定端口，或者用docker ps 也可以看到。</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;帮助命令&quot;&gt;&lt;a href=&quot;#帮助命令&quot; class=&quot;headerlink&quot; title=&quot;帮助命令&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.ljchengx.cn/categories/JAVA/"/>
    
      <category term="Docker" scheme="http://www.ljchengx.cn/categories/JAVA/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.ljchengx.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker系列之练习</title>
    <link href="http://www.ljchengx.cn/2021/03/09/Docker%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%83%E4%B9%A0/"/>
    <id>http://www.ljchengx.cn/2021/03/09/Docker%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%83%E4%B9%A0/</id>
    <published>2021-03-09T11:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h2 id="一、使用Docker部署Nginx"><a href="#一、使用Docker部署Nginx" class="headerlink" title="一、使用Docker部署Nginx"></a>一、使用Docker部署Nginx</h2><blockquote><p>开始</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步 建议去docker hub搜索</span></span><br><span class="line">[root@VM-0-11-centos /]# docker search nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步 下载</span></span><br><span class="line">[root@VM-0-11-centos /]# docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里使用容器的80对应给主机的3344端口 重命名为nginx01</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name 重命名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 宿主机端口 </span></span><br><span class="line">[root@VM-0-11-centos /]# docker run -d --name nginx01 -p 3344:80 nginx </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过curl 来验证访问主机的3344端口 这里直接返回了nginx默认页面</span></span><br><span class="line">[root@VM-0-11-centos /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                  NAMES</span><br><span class="line">933ee17088da   nginx     "/docker-entrypoint.…"   55 seconds ago   Up 54 seconds   0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class="line">[root@VM-0-11-centos /]# curl localhost:3344</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href="http://nginx.org/"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href="http://nginx.com/"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210309143957874.png" alt="image-20210309143957874"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">[root@VM-0-11-centos /]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@933ee17088da:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br></pre></td></tr></table></figure><p>思考：</p><p>每次修改配置文件 需要进入容器</p><p>达到容器外部修改文件 内部完成修改</p><p>-v 数据卷技术</p><h2 id="二、使用Docker安装Tomcat"><a href="#二、使用Docker安装Tomcat" class="headerlink" title="二、使用Docker安装Tomcat"></a>二、使用Docker安装Tomcat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方的使用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --rm tomcat:9.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 之前的启动属于后台 停止后 容器还能查到 使用官方命令是用完即删</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自己使用 先下载 后启动</span></span><br><span class="line">[root@VM-0-11-centos /]# docker pull tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">[root@VM-0-11-centos /]# docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试访问没有问题</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">[root@VM-0-11-centos /]# docker exec -it tomcat01 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现问题 linux命令少了 webapps下没有文件  默认最小镜像 所有不必要的文件去除 保证最小可运行的环境</span></span><br></pre></td></tr></table></figure><h2 id="三、使用Docker部署elasticsearch"><a href="#三、使用Docker部署elasticsearch" class="headerlink" title="三、使用Docker部署elasticsearch"></a>三、使用Docker部署elasticsearch</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> es 暴露的端口很多</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> es 十分耗内存 数据需要挂载</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --net somenetwork 网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e <span class="string">"discovery.type=single-node"</span> elasticsearch:7.10.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动直接卡死  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 docker stats </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e 环境配置修改</span></span><br><span class="line">docker run -d --name elasticsearch01 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-xms64m -xmx512m" elasticsearch:7.10.1</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;一、使用Docker部署Nginx&quot;&gt;&lt;a href=&quot;#一、使用Docker部署Nginx&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.ljchengx.cn/categories/JAVA/"/>
    
      <category term="Docker" scheme="http://www.ljchengx.cn/categories/JAVA/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.ljchengx.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker系列之安装</title>
    <link href="http://www.ljchengx.cn/2021/03/08/Docker%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
    <id>http://www.ljchengx.cn/2021/03/08/Docker%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%89%E8%A3%85/</id>
    <published>2021-03-08T11:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h2 id="Docker之安装"><a href="#Docker之安装" class="headerlink" title="Docker之安装"></a>Docker之安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>环境准备</p></blockquote><p>1.Linux服务器 Centos7</p><p>2.远程连接</p><blockquote><p>环境查看</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统内核是3.10以上</span></span><br><span class="line">[root@VM-0-11-centos ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1127.19.1.el7.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统详细情况</span></span><br><span class="line">NAME=<span class="string">"CentOS Linux"</span></span><br><span class="line">VERSION=<span class="string">"7 (Core)"</span></span><br><span class="line">ID=<span class="string">"centos"</span></span><br><span class="line">ID_LIKE=<span class="string">"rhel fedora"</span></span><br><span class="line">VERSION_ID=<span class="string">"7"</span></span><br><span class="line">PRETTY_NAME=<span class="string">"CentOS Linux 7 (Core)"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"0;31"</span></span><br><span class="line">CPE_NAME=<span class="string">"cpe:/o:centos:centos:7"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.centos.org/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.centos.org/"</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">"CentOS-7"</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">"7"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">"centos"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">"7"</span></span><br></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><p>帮助文档：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、卸载旧文件</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo # 默认国外 </span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 推荐使用阿里云</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新yum 索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、安装docker docker-ce 社区版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6、使用docker version 查看是否安装成功</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210306164301153.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 7、run</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210306163508989.png" alt=""></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8、查看下载的hello-word 镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210306163717655.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 9、卸载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><p>1、登录阿里云 容器镜像服务</p><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210306165025966.png" alt="image-20210306165025966"></p><p>2、找到镜像服务加速地址 左下角位置 找到对应系统</p><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210306165217127.png" alt="image-20210306165217127"></p><p>3、配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://ki5mdt9h.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="回顾流程"><a href="#回顾流程" class="headerlink" title="回顾流程"></a>回顾流程</h3><p>1.开始</p><p>2.Docker会在本机寻找镜像</p><p>3.判断本机是否有镜像</p><p>4.有镜像就运行 没有就去仓库下载</p><p>5.找到了下载并运行</p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><h4 id="docker是如何工作的？"><a href="#docker是如何工作的？" class="headerlink" title="docker是如何工作的？"></a>docker是如何工作的？</h4><p>Docker是-个Client Server结构的系统, Docker的守护进程运行在主机上。通过Socket从客户端访问 !</p><p>Docker Server接收到Docker-Client的指令,就会执行这个命令!</p><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210306170149393.png" alt=""></p><h4 id="docker为什么比Vm快？"><a href="#docker为什么比Vm快？" class="headerlink" title="docker为什么比Vm快？"></a>docker为什么比Vm快？</h4><p>1、docker比虚拟机有着更少的抽象层</p><p><img src="https://cdn.jsdelivr.net/gh/ljchengx/PicGo/img/image-20210306170310973.png" alt="image-20210306170310973"></p><p>2、docker利用的是宿主机的内核</p><p>所以说,新建一个容器的时候 , docker不需要想虚拟机一样重新加载一个操作系统内核 ,避免引导。</p><p>虚拟机是加载GuestOS ,分钟级别的,而docker是利用宿主机的操作系统吗,省略了这个复杂的过程,秒级!</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;Docker之安装&quot;&gt;&lt;a href=&quot;#Docker之安装&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.ljchengx.cn/categories/JAVA/"/>
    
      <category term="Docker" scheme="http://www.ljchengx.cn/categories/JAVA/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.ljchengx.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Eureka(四)</title>
    <link href="http://www.ljchengx.cn/2021/02/24/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka(%E5%9B%9B)/"/>
    <id>http://www.ljchengx.cn/2021/02/24/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka(%E5%9B%9B)/</id>
    <published>2021-02-24T11:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>熔断器：</p><p><strong>优点</strong>：</p><p>1.快速失效 不用等业务超时时间 返回默认值</p><p>2.服务正常，自动连接到业务</p><p><strong>三种状态</strong>：关闭 打开 半开</p><p>1.不是调用失败立即打开</p><p>2.调用次数达到阀值 服务出异常 打开断路器</p><p>3.过一个时间窗口 重新调用</p><p>如果服务调用失败 就是调用FallBack</p><h3 id="1-服务提供者"><a href="#1-服务提供者" class="headerlink" title="1.服务提供者"></a>1.服务提供者</h3><p>这里使用的还是之前的提供者模块spring-cloud-eureka-client</p><p>1.pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9992</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-order-service-provider</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.controller逻辑代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStatisticServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getResult/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getResult = "</span> + port + <span class="string">"--"</span> + +id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.启动Eureka服务，启动服务提供者</p><p><a href="https://imgtu.com/i/yOEkXF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/24/yOEkXF.png" alt="yOEkXF.png"></a></p><h3 id="2-服务调用者"><a href="#2-服务调用者" class="headerlink" title="2.服务调用者"></a>2.服务调用者</h3><p>这里服务调用者我们使用Feign的方式来处理 项目参考Feign的配置</p><p>我们新建一个子module命名为spring-cloud-user-hystrix-consumer</p><p>1.pom.xml</p><p>这里注意一下 我们在Feign的基础上需要添加Hystrix的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.yml配置文件</p><p>换个名称和端口即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9997</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-user-hystrix-consumer</span> <span class="comment"># 应用名称，应用名称会在Eureka中作为服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.Feign的接口</p><p>使用Feign来完成服务调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"spring-cloud-order-service-provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IResultInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/order/getResult/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.Controller</p><p>这里需要注意 我们在写自己调用方法的同时，就需要引入熔断器的fallback，当我们的服务提供者无法访问的时候，</p><p>触发熔断器则进入自定义写的类似回调方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IResultInterface iResultInterface;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getResult/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallbackGetResult"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iResultInterface.getResult(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//触发熔断器的返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallbackGetResult</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这里进入熔断器的默认值"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.启动项目</p><p><a href="https://imgtu.com/i/yOEEm4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/24/yOEEm4.png" alt="yOEEm4.png"></a></p><p>启动完成，我们来验证一下；浏览器地址输入：<a href="http://localhost:9997/order/getResult/1234567" target="_blank" rel="noopener">http://localhost:9997/order/getResult/1234567</a></p><p>这个时候返回的结果是：</p><p><a href="https://imgtu.com/i/yOEmkR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/24/yOEmkR.png" alt="yOEmkR.png"></a></p><p>说明当前通过Feign来调用9992端口的服务提供者方法成功</p><p>然后我们把服务提供者的端口停掉，刷新请求看看效果</p><p><a href="https://imgtu.com/i/yOEQ1K" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/24/yOEQ1K.png" alt="yOEQ1K.png"></a></p><p>这里发现进入我们的fallback的自定义方法里了，说明熔断器触发成功。</p><p>代码已上传至<a href="https://github.com/ljchengx/spring-cloud-parent" target="_blank" rel="noopener">Github</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;Hystrix&quot;&gt;&lt;a href=&quot;#Hystrix&quot; class=&quot;headerlink&quot; title=&quot;Hys
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.ljchengx.cn/categories/JAVA/"/>
    
      <category term="SpringCloud" scheme="http://www.ljchengx.cn/categories/JAVA/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.ljchengx.cn/tags/SpringCloud/"/>
    
      <category term="Hystrix" scheme="http://www.ljchengx.cn/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Eureka(三)</title>
    <link href="http://www.ljchengx.cn/2021/02/23/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka(%E4%B8%89)/"/>
    <id>http://www.ljchengx.cn/2021/02/23/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka(%E4%B8%89)/</id>
    <published>2021-02-23T11:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>我们在进行微服务项目的开发的时候，经常会遇到一个问题，比如A服务是一个针对用户的服务，里面有用户的增删改查的接口和方法，而现在我有一个针对产品的服务B服务中有一个查找用户的需求，这个时候我们可以在B服务里再写一个查找用户的接口，可是就为了一个接口就得从控制层到持久层都写一遍怎么看都不值当，最关键的是这个接口在别的服务里面还有，这就更不应该做了，所以springCloud提供了服务调用的方法——feign。</p><h3 id="一、Feign"><a href="#一、Feign" class="headerlink" title="一、Feign"></a>一、Feign</h3><h4 id="1-Eureka注册中心"><a href="#1-Eureka注册中心" class="headerlink" title="1.Eureka注册中心"></a>1.Eureka注册中心</h4><p>注册中心较为简单，这里就不多赘述，不清楚的可以参考系列第一篇。</p><h4 id="2-服务提供者"><a href="#2-服务提供者" class="headerlink" title="2.服务提供者"></a>2.服务提供者</h4><p>pom.xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.yml文件需要修改配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9992</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-order-service-provider</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span> <span class="string">//这里是server工程地址</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.启动项需要添加的注解和server不一样，使用@EnableDiscoveryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.我们这边写一个方法，等下使用，新建一个controller文件夹，创建一个controller.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order/data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStatisticServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getResult/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getResult = "</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.启动当前服务提供者</p><p>这里在server页面就可以看到已经注册成功。</p><p><a href="https://imgchr.com/i/yLCEDI" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yLCEDI.png" alt="yLCEDI.png"></a></p><h4 id="3-服务调用者"><a href="#3-服务调用者" class="headerlink" title="3.服务调用者"></a>3.服务调用者</h4><p>Feign依赖于Eureka环境，所以我们在上面的基础上新增一个子module即可</p><p>1.pom.xml文件如下,相比上面简单调用的第四步多一个关于Feign的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9994</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-user-feign-consumer</span> <span class="comment"># 应用名称，应用名称会在Eureka中作为服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.启动项相比上面的调用者多个@EnableFeignClients注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.我们使用Feign需要创建一个接口 这里举个简单的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"spring-cloud-order-service-provider"</span>) <span class="comment">//这里是服务提供者在Eureka中的名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IResultInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/order/getResult/&#123;id&#125;"</span>) <span class="comment">//服务提供者的接口路由</span></span><br><span class="line">    <span class="function">String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.我们创建当前module的Controller调用的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IResultInterface iResultInterface; <span class="comment">//这里使用接口来完成方法的请求</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getResult/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iResultInterface.getResult(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.启动并访问看看效果</p><p><a href="https://imgchr.com/i/yLCmUf" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yLCmUf.png" alt="yLCmUf.png"></a></p><p><a href="https://imgchr.com/i/yLCQ2Q" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yLCQ2Q.png" alt="yLCQ2Q.png"></a></p><p>这里看到我们请求的是9994的新的服务调用者工程 但是返回值的服务提供者的结果，说明这里Feign使用成功。</p><p>代码已上传至<a href="https://github.com/ljchengx/spring-cloud-parent" target="_blank" rel="noopener">Github</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;Feign&quot;&gt;&lt;a href=&quot;#Feign&quot; class=&quot;headerlink&quot; title=&quot;Feign&quot;&gt;
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.ljchengx.cn/categories/JAVA/"/>
    
      <category term="SpringCloud" scheme="http://www.ljchengx.cn/categories/JAVA/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.ljchengx.cn/tags/SpringCloud/"/>
    
      <category term="Feign" scheme="http://www.ljchengx.cn/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Eureka(二)</title>
    <link href="http://www.ljchengx.cn/2021/02/23/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka(%E4%BA%8C)/"/>
    <id>http://www.ljchengx.cn/2021/02/23/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka(%E4%BA%8C)/</id>
    <published>2021-02-23T11:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h3 id="一、服务提供者"><a href="#一、服务提供者" class="headerlink" title="一、服务提供者"></a>一、服务提供者</h3><h4 id="1-Eureka注册中心"><a href="#1-Eureka注册中心" class="headerlink" title="1.Eureka注册中心"></a>1.Eureka注册中心</h4><p>注册中心较为简单，这里就不多赘述，不清楚的可以参考上一篇。</p><h4 id="2-创建服务提供者"><a href="#2-创建服务提供者" class="headerlink" title="2.创建服务提供者"></a>2.创建服务提供者</h4><p>这里我们先创建一个spring-cloud-eureka-client子module</p><p>1.pom.xml文件为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9992</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-order-service-provider</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.启动项添加注解@EnableDiscoveryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.添加controller 这里根据自己需要写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStatisticServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getResult/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getResult = "</span> + port + <span class="string">"--"</span> + +id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.同理创建第二个服务提供者spring-cloud-eureka-client2</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml 端口改变，名称不变</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9995</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-order-service-provider</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>启动器和controller基本一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClient2Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClient2Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStatisticServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getResult/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getResult = "</span> + port + <span class="string">"--"</span> + +id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.启动两个服务提供者我们在注册中心看看效果</p><p><a href="https://imgchr.com/i/yL9fun" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yL9fun.png" alt="yL9fun.png"></a></p><p>这里两个不同端口的同一个服务的提供者完成。</p><h3 id="二、服务调用者"><a href="#二、服务调用者" class="headerlink" title="二、服务调用者"></a>二、服务调用者</h3><p>上面我们创建了服务提供者，现在我们来创建服务调用者</p><p>创建一个子module命名为spring-cloud-eureka-ribbon 因为eureka依赖本身已经带有ribbon，我们在使用中不需要额外引入。</p><p>1.pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9996</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-user-ribbon-consumer</span> <span class="comment"># 应用名称，应用名称会在Eureka中作为服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.启动项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RibbonApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.配置项</p><p>由于我们使用的是RestTemplate来完成请求</p><p>添加RestTemplateConfiguration，这里需要添加注解@LoadBalanced 使用轮询来请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来处理我们的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ribbon"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getResult/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">"http://"</span> + <span class="string">"spring-cloud-order-service-provider"</span> + <span class="string">"/order/getResult/"</span> + id;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里url就是我们服务提供者的名称来组成的。</p><p>5.启动并请求</p><p><a href="https://imgchr.com/i/yL9HCF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yL9HCF.png" alt="yL9HCF.png"></a></p><p>浏览器<a href="http://localhost:9996/ribbon/getResult/123456" target="_blank" rel="noopener">http://localhost:9996/ribbon/getResult/123456</a></p><p>刷新几次可以看看结果：</p><p><a href="https://imgchr.com/i/yL9Lv9" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yL9Lv9.png" alt="yL9Lv9.png"></a></p><p><a href="https://imgchr.com/i/yL9vHx" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yL9vHx.png" alt="yL9vHx.png"></a></p><p>这里分别出现了两个不同的结果，变化的就是服务提供者的端口，可以说明我们的ribbon使用成功。</p><p>代码已上传至<a href="https://github.com/ljchengx/spring-cloud-parent" target="_blank" rel="noopener">Github</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;Ribbon&quot;&gt;&lt;a href=&quot;#Ribbon&quot; class=&quot;headerlink&quot; title=&quot;Ribbo
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.ljchengx.cn/categories/JAVA/"/>
    
      <category term="SpringCloud" scheme="http://www.ljchengx.cn/categories/JAVA/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.ljchengx.cn/tags/SpringCloud/"/>
    
      <category term="Ribbon" scheme="http://www.ljchengx.cn/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Eureka</title>
    <link href="http://www.ljchengx.cn/2021/02/23/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka/"/>
    <id>http://www.ljchengx.cn/2021/02/23/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka/</id>
    <published>2021-02-23T11:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h2 id="一、注册中心"><a href="#一、注册中心" class="headerlink" title="一、注册中心"></a>一、注册中心</h2><h3 id="1-简单调用"><a href="#1-简单调用" class="headerlink" title="1.简单调用"></a>1.简单调用</h3><h4 id="1-Parent项目"><a href="#1-Parent项目" class="headerlink" title="1.Parent项目"></a>1.Parent项目</h4><p>主要父级依赖文件详细pom文件为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring.cloud-version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">spring.cloud-version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Eureka-Server工程"><a href="#2-Eureka-Server工程" class="headerlink" title="2.Eureka Server工程"></a>2.Eureka Server工程</h4><p>注册中心提供者</p><p>1.创建一个子module在父级项目下 pom文件需要添加netflix-eureka-server</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置文件yml如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eureka server服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9991</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-eureka-server</span> <span class="comment"># 应用名称，应用名称会在Eureka中作为服务名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># eureka 客户端配置（和Server交互），Eureka Server 其实也是一个Client</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>  <span class="comment"># 当前eureka实例的主机名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 配置客户端所交互的Eureka Server的地址（Eureka Server集群中每一个Server其实相对于其它Server来说都是Client）</span></span><br><span class="line">      <span class="comment"># 集群模式下，defaultZone应该指向其它Eureka Server，如果有更多其它Server实例，逗号拼接即可</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.启动项需要添加注解@EnableEurekaServer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.启动效果如下：</p><p><a href="https://imgchr.com/i/yL9KXR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yL9KXR.png" alt="yL9KXR.png"></a></p><p>这里注册服务完成，下面开始处理服务提供者。</p><h4 id="3-服务提供者"><a href="#3-服务提供者" class="headerlink" title="3.服务提供者"></a>3.服务提供者</h4><p>服务提供者</p><p>1.和server工程一样创建一个子module，不过需要添加的依赖不一样</p><p>pom.xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.yml文件需要修改配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9992</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-order-service-provider</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span> <span class="string">//这里是server工程地址</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.启动项需要添加的注解和server不一样，使用@EnableDiscoveryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.我们这边写一个方法，等下使用，新建一个controller文件夹，创建一个controller.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order/data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStatisticServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id获取今日完单数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  完单数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getTodayFinishOrderNum/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTodayFinishOrderNum</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.启动当前服务提供者</p><p>这里在server页面就可以看到已经注册成功。</p><p><a href="https://imgchr.com/i/yL9176" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yL9176.png" alt="yL9176.png"></a></p><h4 id="4-服务调用者"><a href="#4-服务调用者" class="headerlink" title="4.服务调用者"></a>4.服务调用者</h4><p>调用者整体配置内容和提供者相同，我们按照第三步来修改一下</p><p>1.先创建一个子mudole pom.xml一样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.yml修改下名称和端口号</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9993</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-user-service-consumer</span> <span class="comment"># 应用名称，应用名称会在Eureka中作为服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:9991/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># ⾃⼰就是服务不需要注册⾃⼰ 集群模式下可以改成true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># ⾃⼰就是服务不需要从Eureka Server获取服务信息,默认为true，集群模式下可以改成true</span></span><br></pre></td></tr></table></figure><p>3.启动项也是新增@EnableDiscoveryClient 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.这里我们也写一个controller ，在写controller之前写一个RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.然后我们写一个controller 这里通过服务提供者的名称 来调用第三步的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getTodayStatistic/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTodayStatistic</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用discoveryClient 类能够与eureka server 交互， getInstances 获取注册到eureka server</span></span><br><span class="line">        <span class="comment">// 的"spring-cloud-order-service-provider" 实例列表</span></span><br><span class="line"></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"spring-cloud-order-service-provider"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取第一个服务信息</span></span><br><span class="line">        ServiceInstance instanceInfo = instances.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获取ip</span></span><br><span class="line">        String ip = instanceInfo.getHost();</span><br><span class="line">        <span class="comment">//获取port</span></span><br><span class="line">        <span class="keyword">int</span> port = instanceInfo.getPort();</span><br><span class="line">        String url  =<span class="string">"http://"</span>+ip+<span class="string">":"</span>+port+<span class="string">"/order/data/getTodayFinishOrderNum/"</span>+id;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.启动看看</p><p><a href="https://imgchr.com/i/yL9JhD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yL9JhD.png" alt="yL9JhD.png"></a></p><p>这里就出现了两个 我们来试试服务调用者</p><p>我们在浏览器页面输入服务调用者的方法<a href="http://localhost:9993/user/data/getTodayStatistic/1001" target="_blank" rel="noopener">http://localhost:9993/user/data/getTodayStatistic/1001</a></p><p><a href="https://imgchr.com/i/yL9N1H" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/23/yL9N1H.png" alt="yL9N1H.png"></a></p><p>这里时候返回的是服务提供者的端口，验证通过，实际上最终方法调用的是9992端口的服务提供者的方法。</p><p>以上一个Eureka简单调用方式流程完成。</p><p>代码已上传至<a href="https://github.com/ljchengx/spring-cloud-parent" target="_blank" rel="noopener">Github</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;一、注册中心&quot;&gt;&lt;a href=&quot;#一、注册中心&quot; class=&quot;headerlink&quot; title=&quot;一、注册中
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://www.ljchengx.cn/categories/JAVA/"/>
    
      <category term="SpringCloud" scheme="http://www.ljchengx.cn/categories/JAVA/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.ljchengx.cn/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="http://www.ljchengx.cn/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之抽象工厂模式</title>
    <link href="http://www.ljchengx.cn/2020/11/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.ljchengx.cn/2020/11/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-11-09T16:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --><h4 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h4><p><strong>抽象工厂</strong>是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。</p><h4 id="二、方案"><a href="#二、方案" class="headerlink" title="二、方案"></a>二、方案</h4><p>抽象工厂模式建议为系列中的每件产品明确声明接口 （例如椅子、 沙发或咖啡桌）。 然后， 确保所有产品变体都继承这些接口。 例如， 所有风格的椅子都实现 <code>椅子</code>接口； 所有风格的咖啡桌都实现 <code>咖啡桌</code>接口， 以此类推。客户端代码可以通过相应的抽象接口调用工厂和产品类。 你无需修改实际客户端代码， 就能更改传递给客户端的工厂类， 也能更改客户端代码接收的产品变体。</p><h4 id="三、适合应用场景"><a href="#三、适合应用场景" class="headerlink" title="三、适合应用场景"></a>三、适合应用场景</h4><ol><li>如果代码需要与多个不同系列的相关产品交互， 但是由于无法提前获取相关信息， 或者出于对未来扩展性的考虑， 你不希望代码基于产品的具体类进行构建， 在这种情况下， 你可以使用抽象工厂。</li><li>如果你有一个基于一组抽象方法的类， 且其主要功能因此变得不明确， 那么在这种情况下可以考虑使用抽象工厂模式。</li></ol><h4 id="四、实现方式"><a href="#四、实现方式" class="headerlink" title="四、实现方式"></a>四、实现方式</h4><ol><li>以不同的产品类型与产品变体为维度绘制矩阵。</li><li>为所有产品声明抽象产品接口。 然后让所有具体产品类实现这些接口。</li><li>声明抽象工厂接口， 并且在接口中为所有抽象产品提供一组构建方法。</li><li>为每种产品变体实现一个具体工厂类。</li><li>在应用程序中开发初始化代码。 该代码根据应用程序配置或当前环境， 对特定具体工厂类进行初始化。 然后将该工厂对象传递给所有需要创建产品的类。</li><li>找出代码中所有对产品构造函数的直接调用， 将其替换为对工厂对象中相应构建方法的调用。</li></ol><h4 id="五、优缺点"><a href="#五、优缺点" class="headerlink" title="五、优缺点"></a>五、优缺点</h4><ul><li>你可以确保同一工厂生成的产品相互匹配。✔</li><li>你可以避免客户端和具体产品代码的耦合。✔</li><li>单一职责原则。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。✔</li><li>开闭原则。 向应用程序中引入新产品变体时， 你无需修改客户端代码。✔</li><li>由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂。×</li></ul><h4 id="六、代码实例"><a href="#六、代码实例" class="headerlink" title="六、代码实例"></a>六、代码实例</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignModel.FactoryMethod</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 抽象工厂接口声明一组方法，这些方法返回不同的抽象产品。这些产品被称为一个系列</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 与高层次的主题或概念相关的。一个家庭的产品是他们通常能够相互合作</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 一个系列的产品可以有几个变体，但其中一个变体的产品不兼容用别人的产品</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAbstractFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">IAbstractProductA <span class="title">CreateProductA</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">IAbstractProductB <span class="title">CreateProductB</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteFactory1</span> : <span class="title">IAbstractFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IAbstractProductA <span class="title">CreateProductA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IAbstractProductB <span class="title">CreateProductB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteFactory2</span> : <span class="title">IAbstractFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IAbstractProductA <span class="title">CreateProductA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IAbstractProductB <span class="title">CreateProductB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 产品系列中的每个不同产品都应该有一个基本接口。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 产品的所有变体都必须实现此接口。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAbstractProductA</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">string</span> <span class="title">UsefulFunctionA</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteProductA1</span> : <span class="title">IAbstractProductA</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">UsefulFunctionA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品A1的结果"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteProductA2</span> : <span class="title">IAbstractProductA</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">UsefulFunctionA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品A2的结果"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAbstractProductB</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 产品B做自己的事情</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">string</span> <span class="title">UsefulFunctionB</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 但它也可以与产品合作。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 抽象工厂确保它生产的所有产品都是有价值的</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 相同的变体，因此，兼容。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="collaborator"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">string</span> <span class="title">AnotherUsefulFunctionB</span>(<span class="params">IAbstractProductA collaborator</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteProductB1</span> : <span class="title">IAbstractProductB</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">AnotherUsefulFunctionB</span>(<span class="params">IAbstractProductA collaborator</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = collaborator.UsefulFunctionA();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$"这是B1与<span class="subst">&#123;result&#125;</span>合作"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">UsefulFunctionB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品B1的结果"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteProductB2</span> : <span class="title">IAbstractProductB</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">AnotherUsefulFunctionB</span>(<span class="params">IAbstractProductA collaborator</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = collaborator.UsefulFunctionA();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$"这是B2与<span class="subst">&#123;result&#125;</span>合作"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">UsefulFunctionB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品B2的结果"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DesignModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"用第一种工厂类型测试相同的客户端代码"</span>);</span><br><span class="line">            ClientMethod(<span class="keyword">new</span> ConcreteFactory1());</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"用第二种工厂类型测试相同的客户端代码"</span>);</span><br><span class="line">            ClientMethod(<span class="keyword">new</span> ConcreteFactory2());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClientMethod</span>(<span class="params">IAbstractFactory factory</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> productA = factory.CreateProductA();</span><br><span class="line">            <span class="keyword">var</span> productB = factory.CreateProductB();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(productB.UsefulFunctionB());</span><br><span class="line">            Console.WriteLine(productB.AnotherUsefulFunctionB(productA));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/B7qOL8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/B7qOL8.png" alt="B7qOL8.png"></a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;一、定义&quot;&gt;&lt;a href=&quot;#一、定义&quot; class=&quot;headerlink&quot; title=&quot;一、定义&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.ljchengx.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="工厂" scheme="http://www.ljchengx.cn/tags/%E5%B7%A5%E5%8E%82/"/>
    
      <category term="设计模式" scheme="http://www.ljchengx.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象" scheme="http://www.ljchengx.cn/tags/%E6%8A%BD%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂方法模式</title>
    <link href="http://www.ljchengx.cn/2020/11/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.ljchengx.cn/2020/11/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-11-08T16:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --><p>又称虚拟构造函数、Virtual Constructor、Factory Method</p><h4 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h4><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><h4 id="二、方案"><a href="#二、方案" class="headerlink" title="二、方案"></a>二、方案</h4><p>工厂方法模式建议使用特殊的<em>工厂</em>方法代替对于对象构造函数的直接调用 （即使用 <code>new</code>运算符）。 不用担心， 对象仍将通过 <code>new</code>运算符创建， 只是该运算符改在工厂方法中调用罢了。 工厂方法返回的对象通常被称作 “产品”。乍看之下， 这种更改可能毫无意义： 我们只是改变了程序中调用构造函数的位置而已。 但是， 仔细想一下， 现在你可以在子类中重写工厂方法， 从而改变其创建产品的类型。但有一点需要注意:仅当这些产品具有共同的基类或者接口时， 子类才能返回不同类型的产品， 同时基类中的工厂方法还应将其返回类型声明为这一共有接口。</p><h4 id="三、适合应用场景"><a href="#三、适合应用场景" class="headerlink" title="三、适合应用场景"></a>三、适合应用场景</h4><ol><li>当你在编写代码的过程中， 如果无法预知对象确切类别及其依赖关系时， 可使用工厂方法。</li><li>如果你希望用户能扩展你软件库或框架的内部组件， 可使用工厂方法。</li><li>如果你希望复用现有对象来节省系统资源， 而不是每次都重新创建对象， 可使用工厂方法。</li></ol><h4 id="四、实现方式"><a href="#四、实现方式" class="headerlink" title="四、实现方式"></a>四、实现方式</h4><ol><li>让所有产品都遵循同一接口。 该接口必须声明对所有产品都有意义的方法。</li><li>在创建类中添加一个空的工厂方法。 该方法的返回类型必须遵循通用的产品接口。</li><li>在创建者代码中找到对于产品构造函数的所有引用。 将它们依次替换为对于工厂方法的调用， 同时将创建产品的代码移入工厂方法。 你可能需要在工厂方法中添加临时参数来控制返回的产品类型。</li><li>现在， 为工厂方法中的每种产品编写一个创建者子类， 然后在子类中重写工厂方法， 并将基本方法中的相关创建代码移动到工厂方法中。</li><li>如果应用中的产品类型太多， 那么为每个产品创建子类并无太大必要， 这时你也可以在子类中复用基类中的控制参数。</li></ol><h4 id="五、优缺点"><a href="#五、优缺点" class="headerlink" title="五、优缺点"></a>五、优缺点</h4><ul><li>你可以避免创建者和具体产品之间的紧密耦合。✔</li><li><em>单一职责原则</em>。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。✔</li><li><em>开闭原则</em>。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。✔</li><li>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。×</li></ul><h4 id="六、代码实例"><a href="#六、代码实例" class="headerlink" title="六、代码实例"></a>六、代码实例</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 工厂方法模式 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignModel.FactoryMethod</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建者</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Creator类声明了要返回的工厂方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Creator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Product类的对象。创建者的子类通常提供此方法的实现。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IProduct <span class="title">FactoryMethod</span>(<span class="params"></span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">SomeOperation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> product = FactoryMethod();</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">"使用同一创建者代码执行"</span> + product.Operation();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">CreatorA</span> : <span class="title">Creator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IProduct <span class="title">FactoryMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">CreatorB</span> : <span class="title">Creator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IProduct <span class="title">FactoryMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 产品接口</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProduct</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">string</span> <span class="title">Operation</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 产品A实现的是 1+2</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ProductA</span> : <span class="title">IProduct</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Operation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品A的操作是 1+2"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 产品B实现的是 1*2</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ProductB</span> : <span class="title">IProduct</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Operation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"产品B的操作 1*2"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CreatorA creatorA = <span class="keyword">new</span> CreatorA();</span><br><span class="line">        Console.WriteLine(creatorA.SomeOperation());</span><br><span class="line"></span><br><span class="line">        CreatorB creatorB = <span class="keyword">new</span> CreatorB();</span><br><span class="line">        Console.WriteLine(creatorB.SomeOperation());</span><br><span class="line"></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/B74WSU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/09/B74WSU.png" alt="B74WSU.png"></a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;又称虚拟构造函数、Virtual Constructor、Factory Method&lt;/p&gt;&lt;h4 id=&quot;一、定义&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.ljchengx.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="工厂" scheme="http://www.ljchengx.cn/tags/%E5%B7%A5%E5%8E%82/"/>
    
      <category term="设计模式" scheme="http://www.ljchengx.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C#高级特性（泛型）</title>
    <link href="http://www.ljchengx.cn/2020/09/29/C-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E6%B3%9B%E5%9E%8B/"/>
    <id>http://www.ljchengx.cn/2020/09/29/C-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E6%B3%9B%E5%9E%8B/</id>
    <published>2020-09-28T16:00:00.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h4 id="一、什么是泛型"><a href="#一、什么是泛型" class="headerlink" title="一、什么是泛型"></a>一、什么是泛型</h4><p><strong>泛型（Generic）</strong> 允许延迟编写类或方法中的编程元素的数据类型的规范，直到实际在程序中使用它的时候。换句话说，泛型允许编写一个可以与任何数据类型一起工作的类或方法。</p><p>通过数据类型的替代参数编写类或方法的规范。当编译器遇到类的构造函数或方法的函数调用时，它会生成代码来处理指定的数据类型。</p><p><strong>特性</strong></p><ul><li>有助于最大限度地重用代码、保护类型的安全以及提高性能。</li><li>创建泛型集合类。.NET 框架类库在 <em>System.Collections.Generic</em> 命名空间中包含了一些新的泛型集合类。使用这些泛型集合类来替代 <em>System.Collections</em> 中的集合类。</li><li>创建自己的泛型接口、泛型类、泛型方法、泛型事件和泛型委托。</li><li>对泛型类进行约束以访问特定数据类型的方法。</li><li>关于泛型数据类型中使用的类型的信息可在运行时通过使用反射获取。</li></ul><h4 id="二、为什么要使用泛型"><a href="#二、为什么要使用泛型" class="headerlink" title="二、为什么要使用泛型"></a>二、为什么要使用泛型</h4><p><strong>1.案例</strong></p><p>创建一个简单类具有三个方法，参数分别对应三种不同数据类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 多类型示例方法</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">DemoMethod</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowInt</span>(<span class="params"><span class="keyword">int</span> iP</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"传入的是："</span> + iP + <span class="string">"类型是："</span> +iP.GetType());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowString</span>(<span class="params"><span class="keyword">string</span> sP</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"传入的是："</span> + sP + <span class="string">"类型是："</span> +sP.GetType());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowDatetime</span>(<span class="params">DateTime dtP</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"传入的是："</span> + dtP + <span class="string">"类型是："</span>+dtP.GetType());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>第二步在主程序中初始化参数来进行调用，有如下结果：</p><p><a href="https://imgchr.com/i/0ZdsGd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/29/0ZdsGd.png" alt="0ZdsGd.png"></a></p><p>OK 让我们回到方法本身，可以看到除了传入参数不同以外，内部实现完全一致，那我们是不是可以进行一波优化？来看下面：</p><p>我们知道<strong>object</strong>是一切类型的父类，并且任何父类出现的地方都可以用其子类代替。了解这个情况那我们来改进其中的方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowObject</span>(<span class="params"><span class="keyword">object</span> oP</span>)</span> &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"传入的是："</span> + oP + <span class="string">"类型是："</span> + oP.GetType());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行效果如下：</p><p><img src="https://s1.ax1x.com/2020/09/29/0ZwNWj.png" alt="0ZwNWj.png"></p><p>根据结果看到确实达到了我们的需求，那既然这样的话我们还可以在继续延伸一下，这里问个大家问题 object类型有没有缺点？</p><p>对当然有缺点了，来，我们看下面：</p><ol><li><p>装箱拆箱</p><p>装箱：当传入一个int值时，在栈上，object又在堆上，就会把int值copy到堆里；<br>拆箱：当使用int值时，又copy到栈里</p></li><li><p>损耗程序的性能</p></li><li><p>类型安全问题，传递的对象没有限制</p></li></ol><p>针对以上问题，微软在C#2.0的时候推出了泛型。</p><h4 id="三、如何使用泛型"><a href="#三、如何使用泛型" class="headerlink" title="三、如何使用泛型"></a>三、如何使用泛型</h4><p>上面的object方法可以修改为以下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void ShowT&lt;T&gt;(T t) &#123;</span><br><span class="line">Console.WriteLine(&quot;传入的是：&quot; + t + &quot;类型是：&quot; + t.GetType());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T为泛型的类型参数，但在代码中指定T的具体类型时，泛型中的所有T都替换为具体的类型。</p><p>主方法中执行结果如下：</p><p><a href="https://imgchr.com/i/0ZRKqH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/29/0ZRKqH.png" alt="0ZRKqH.png"></a></p><ul><li>泛型声明方法时，一开始没有确定类型，T是什么都不清楚；</li><li>T要等调用的时候才能去确定；</li><li>正是因为没有定死，才有无限可能；</li><li>设计思想–延迟加载：例如分布式缓存队列、EF的延迟加载；</li></ul><p>上面使用泛型的是方法，同样类也是可以使用的泛型的，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class DemoClass&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> T t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数使用：</p><p><img src="https://s1.ax1x.com/2020/09/29/0ZOM5T.png" alt="0ZOM5T.png"></p><p>还有泛型接口：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DemoOne</span></span><br><span class="line">&#123;</span><br><span class="line">    interface DemoInterface&lt;T&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">T <span class="title">getT</span>(<span class="params">T t</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型委托：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DemoOne</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Demodelegate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> HellowWord&lt;T&gt;(T t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、泛型的约束"><a href="#四、泛型的约束" class="headerlink" title="四、泛型的约束"></a>四、泛型的约束</h4><p>表格来至微软官方文档</p><p><strong>C#的值类型</strong>：整型:Int; 长整型:long; 浮点型:float; 字符型:char; 布尔型:bool;</p><p>枚举:enum; 结构:struct; 在C#中所有的值类型都继承自:System.ValueType</p><p><strong>C#引用类型：</strong>数组、委托、接口、object、字符bai串、用户定义的类。</p><table><thead><tr><th><strong>约束</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>where T：结构</td><td>类型参数必须是值类型。 可以指定除 Nullable 以外的任何值类型。</td></tr><tr><td>where T：类</td><td>类型参数必须是引用类型；这同样适用于所有类、接口、委托或数组类型。</td></tr><tr><td>where T：new()</td><td>类型参数必须具有公共无参数构造函数。 与其他约束一起使用时，new() 约束必须最后指定。</td></tr><tr><td>where T：&lt;基类名称&gt;</td><td>类型参数必须是指定的基类或派生自指定的基类。</td></tr><tr><td>where T：&lt;接口名称&gt;</td><td>类型参数必须是指定的接口或实现指定的接口。 可指定多个接口约束。 约束接口也可以是泛型。</td></tr><tr><td>where T：U</td><td>为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数。</td></tr></tbody></table><p>下面通过几个简单的例子来看下具体的约束：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Hellow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          Console.WriteLine(<span class="string">"Hellow"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 值类型类型约束 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="t"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T Get&lt;T&gt;(T t) <span class="keyword">where</span> T : <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 引用类型约束</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="t"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T GetClass&lt;T&gt;(T t) <span class="keyword">where</span> T : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> new()约束</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="t"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T GetNew&lt;T&gt;(T t) <span class="keyword">where</span> T : <span class="keyword">new</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 基类约束 约束类T必须是定义的Person或者其子类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="t"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Show&lt;T&gt;(T t) <span class="keyword">where</span> T : Person</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">$"<span class="subst">&#123;t.Id&#125;</span>_<span class="subst">&#123;t.Name&#125;</span>"</span>);</span><br><span class="line">t.Hellow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 接口约束</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="a"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="b"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T Max&lt;T&gt;(T a, T b) <span class="keyword">where</span> T : IComparable&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.CompareTo(b) &gt; <span class="number">0</span> ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：有多个泛型约束时，new()约束一定是在最后。</p><h4 id="五、泛型的协变和逆变"><a href="#五、泛型的协变和逆变" class="headerlink" title="五、泛型的协变和逆变"></a>五、泛型的协变和逆变</h4><p>协变和逆变是在.NET 4.0的时候出现的，只能放在接口或者委托的泛型参数前面，out 协变covariant，用来修饰返回值；in：逆变contravariant，用来修饰传入参数。</p><p>先看下面的一个例子（部分用例和图片转自如下引用 如有侵权请联系本人删除）：</p><blockquote><p>cnblogs.com/VVStudy/p/11404300.html</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface IFoo&lt;out T&gt;</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function">T <span class="title">GetName</span>(<span class="params"></span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   class Foo : IFoo&lt;string&gt;</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> GetType().Name;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">IFoo&lt;<span class="keyword">string</span>&gt; fooStr = <span class="keyword">new</span> Foo();</span><br><span class="line">IFoo&lt;<span class="keyword">object</span>&gt; fooObj =  fooStr;</span><br><span class="line"><span class="keyword">object</span> name = fooObj.GetName();</span><br></pre></td></tr></table></figure><p>一图胜千言：</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190830/2b7efd63ceb04afa93679ff4f3d52126.png" alt=""></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface IBar&lt;in T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span>(<span class="params">T t</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Bar : IBar&lt;object&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="keyword">object</span> t</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IBar&lt;object&gt; barObj &#x3D; new Bar();</span><br><span class="line">IBar&lt;string&gt; barStr &#x3D; barObj;</span><br><span class="line"></span><br><span class="line">barStr.Print(&quot;hellow word&quot;);</span><br></pre></td></tr></table></figure><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190830/12182b1ee49a46b8a137a4f51c0691b9.png" alt=""></p><p>涉及小问题：</p><p><strong>协变、逆变 为什么只能针对泛型接口或者委托？而不能针对泛型类</strong>？</p><p>因为它们都只能定义方法成员（接口不能定义字段），而方法成员在创建对象的时候是不涉及到对象内存分配的，所以它们是类型（内存）安全的。</p><p>为什么不针对泛型？因为泛型类是模板类，而类成员是包含字段的，不同类型的字段是影响对象内存分配的，没有派生关系的类型它们是不兼容的，也是内存不安全的。</p><p><strong>协变、逆变 为什么是类型安全的？</strong></p><p>本质上是里氏替换原则，由里氏替换原则可知：派生程度小的是派生程度大的子集，所以子类替换父类的位置整个程序功能都不会发生改变。</p><p>自此关于C#泛型介绍到这里，针对部分问题还需认真思考，多去琢磨。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;一、什么是泛型&quot;&gt;&lt;a href=&quot;#一、什么是泛型&quot; class=&quot;headerlink&quot; title=&quot;一、什
      
    
    </summary>
    
    
      <category term="C#高级特性" scheme="http://www.ljchengx.cn/categories/C-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="泛型 特性 高级" scheme="http://www.ljchengx.cn/tags/%E6%B3%9B%E5%9E%8B-%E7%89%B9%E6%80%A7-%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>项目质量管理ITTO</title>
    <link href="http://www.ljchengx.cn/2020/09/24/%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86ITTO/"/>
    <id>http://www.ljchengx.cn/2020/09/24/%E9%A1%B9%E7%9B%AE%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86ITTO/</id>
    <published>2020-09-24T06:49:23.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --><h3 id="项目质量管理ITTO"><a href="#项目质量管理ITTO" class="headerlink" title="项目质量管理ITTO"></a>项目质量管理ITTO</h3><h5 id="规划质量管理"><a href="#规划质量管理" class="headerlink" title="规划质量管理"></a>规划质量管理</h5><p>输入：项目管理计划 干系人登记册 风险登记册 需求文件 事因 组资<br>输出：质量管理计划 过程改进计划 质量测量指标 质量核对单 项目文件更新</p><p>例如客户说这个产品只是要某某功能，那就质量规划也围绕这个来，即用到【干系人登记册）；质量好不好影响好售后，这是钱的问题，很重要，要考虑风险分析【风险登记册），最后看看【需求文件）有没有遗漏的地方，定出一个计划（质量管理计划】，和怎么测量质量好坏的指标（质量测量指标】，网上下载一份本行业的（质量核对单】来核对质量，再提出一个（过程改进计划】，过程改进是基于一些专家提出的观点而诞生的，大致意思就是检查是临时抱佛脚，是事后行为，只有在一开始和做事情的过程中就规范好。</p><h5 id="实施质量保证"><a href="#实施质量保证" class="headerlink" title="实施质量保证"></a>实施质量保证</h5><p>输入：质量管理计划 过程改进计划 质量测量指标 质量控制测量结果 项目文件<br>输出：变更请求 项目管理计划更新 项目文件更新 组资更新</p><p>保证工作质量。比对工作、产品质量结果和指标保证过程没有质量问题，拿【质量测量指标），还包括产品质量的测量结果【质量控制测量结果）一对比检查，就知道工作情况了。手里拿着过程改进计划，只要提出修改（变更请求】就好了</p><h5 id="控制质量"><a href="#控制质量" class="headerlink" title="控制质量"></a>控制质量</h5><p>输入：项目管理计划 质量测量指标 质量核对单 工作绩效数据 批准的变更请求 可交付成果 项目文件 组资<br>输出：质量控制测量结果 确认的变更 核实的可交付物 工作绩效信息 变更请求 项目管理计划更新 项目文件更新 组资更新</p><p>确认产品质量，确认产品变更。监控质量结果即产品有没有到达质量和按变更改好了。拿由控制时间、范围和成本输出的【工作绩效测量结果），和基准【质量测量指标）、【质量核对单）一起去检查分析产品【可交付成果）质量如何，得到一个文档即（质量控制测量结果】，同时确认产品是否达到质量要求，达到就是确认了产品（核实的可交付成果】，没有达到就提出修改意见（变更请求】；再使用变更控制委员会上【批准的变更）去检查产品是否按要求改了，如果改了，就确认这个修改（确认的变更】</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;项目质量管理ITTO&quot;&gt;&lt;a href=&quot;#项目质量管理ITTO&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="信息系统项目管理" scheme="http://www.ljchengx.cn/categories/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="ITTO" scheme="http://www.ljchengx.cn/tags/ITTO/"/>
    
  </entry>
  
  <entry>
    <title>项目成本管理ITTO</title>
    <link href="http://www.ljchengx.cn/2020/09/24/%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86ITTO/"/>
    <id>http://www.ljchengx.cn/2020/09/24/%E9%A1%B9%E7%9B%AE%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86ITTO/</id>
    <published>2020-09-24T06:26:11.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --><h3 id="项目成本管理ITTO"><a href="#项目成本管理ITTO" class="headerlink" title="项目成本管理ITTO"></a>项目成本管理ITTO</h3><h5 id="规划成本管理"><a href="#规划成本管理" class="headerlink" title="规划成本管理"></a>规划成本管理</h5><p>输入：项目管理计划 章程 事因 组资<br>输出：成本管理计划</p><h5 id="估算成本"><a href="#估算成本" class="headerlink" title="估算成本"></a>估算成本</h5><p>输入：成本管理计划 人力资源管理计划 范围基准 项目进度计划 风险登记册 事因 组织<br>输出：活动成本估算 估算依据 项目文件更新</p><p>参考进度、人力、风险，在范围工作包上大概算算花费。既然是大概算算，那就不用从活动这么细来算，从【范围基准）里面的WBS工作包开始估算就可以了，时间急不急【进度计划）、人手够不够【人力资源计划），风险带来损失【风险登记册）都会影响到成本估计，未来包括质量和采购出了风险就会导致损失，以后都要考虑风险的，但是时间和范围不用考虑风险，为什么呢，时间和范围受客户合同影响是死的，最后得到（活动成本估算】，这并不意味着基于活动的估算哦，是基于工作包的估算。还要有个备注（估算依据】，否则老板不知道钱为什么要这样花。</p><h5 id="制定预算"><a href="#制定预算" class="headerlink" title="制定预算"></a>制定预算</h5><p>输入：成本管理计划 范围基准 活动成本估算 估算依据 项目进度计划 资源日历 风险登记册 协议 组资<br>输出：成本基准 资金需求 项目文件更新</p><p>参考范围、日历，在进度计划上汇总成本曲线。首先把【活动成本估算）拿来，（估算依据】仍然要备给老板看，再参考采购【合同）上进货花的钱，成本汇总加起来得到一个总数，光有总数还不够，还要分配到各个阶段上去，如何做呢？【进度计划）里面不就定义了里程碑吗，直接填到里面就一目了然了，设计到钱的问题不能马虎，反复查查范围有没变【范围基准）和人有没时间【资源日历），做到天时地利人和，这样就得到一个曲线（成本绩效基准】和一个阶梯线（项目资金需求】，即做这个项目一共要多少钱，每个阶段用多少钱。</p><h5 id="控制成本"><a href="#控制成本" class="headerlink" title="控制成本"></a>控制成本</h5><p>输入：项目管理计划 资金需求 工作绩效数据 组资<br>输出：工作绩效信息 成本预测 变更请求 项目管理计划更新 项目文件更新 组资更新</p><p>比对工作和绩效考核花费。同理控制进度和控制范围，拿每天收集的工作情况【工作绩效数据）和预算中的【项目资金需求）和“成本绩效基准”一比较就可以得出花钱工作做的如何了，怎么看不到“成本绩效基准”，原来藏在“项目管理计划”里面。最后得到工作效果（工作绩效信息】，还有在工作进展到这个时间点上预测一下未来阶段成本（成本预测】，另外发现问题要提出修改（变更请求】。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;项目成本管理ITTO&quot;&gt;&lt;a href=&quot;#项目成本管理ITTO&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="信息系统项目管理" scheme="http://www.ljchengx.cn/categories/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="ITTO" scheme="http://www.ljchengx.cn/tags/ITTO/"/>
    
  </entry>
  
  <entry>
    <title>项目范围管理ITTO</title>
    <link href="http://www.ljchengx.cn/2020/08/24/%E9%A1%B9%E7%9B%AE%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86ITTO/"/>
    <id>http://www.ljchengx.cn/2020/08/24/%E9%A1%B9%E7%9B%AE%E8%8C%83%E5%9B%B4%E7%AE%A1%E7%90%86ITTO/</id>
    <published>2020-08-24T12:08:31.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --><h2 id="范围管理ITTO"><a href="#范围管理ITTO" class="headerlink" title="范围管理ITTO"></a>范围管理ITTO</h2><h4 id="1-规划范围管理"><a href="#1-规划范围管理" class="headerlink" title="1.规划范围管理"></a>1.规划范围管理</h4><p>描述：管理范围 管理需求<br>输入：项目管理计划 项目章程 事因 组资<br>输出：范围管理计划 需求管理计划</p><h4 id="2-收集需求"><a href="#2-收集需求" class="headerlink" title="2.收集需求"></a>2.收集需求</h4><p>描述：记录需求 管理需求<br>输入：范围管理计划 需求管理计划 干系人管理计划 项目章程 干系人登记册<br>输出：需求文件 需求跟踪矩阵</p><h4 id="3-定义范围"><a href="#3-定义范围" class="headerlink" title="3.定义范围"></a>3.定义范围</h4><p>描述：明确项目边界<br>输入：范围管理计划 需求文件 项目章程 组资<br>输出：项目范围说明书 项目文件更新</p><h4 id="4-创建WBS"><a href="#4-创建WBS" class="headerlink" title="4.创建WBS"></a>4.创建WBS</h4><p>描述： 目标，可交付物分解 项目工作的分解<br>输入： 范围管理计划 项目范围说明书 需求文件 组资<br>输出： 范围基准(批准的项目范围说明书 wbs wbs词典) 项目文件更新</p><h4 id="5-确认范围"><a href="#5-确认范围" class="headerlink" title="5.确认范围"></a>5.确认范围</h4><p>描述： 可交付成果的正式验收<br>输入： 项目管理计划 需求文件 需求跟踪矩阵 核实的可交付成果 工作绩效数据<br>输出： 验收的可交付成果 变更请求 工作绩效信息 项目文件更新</p><h4 id="6-控制范围"><a href="#6-控制范围" class="headerlink" title="6.控制范围"></a>6.控制范围</h4><p>描述： 监督范围状态 管理范围变更<br>输入： 项目管理计划 需求文件 需求跟踪矩阵 工作绩效数据 组资<br>输出： 工作绩效信息 变更请求 项目管理计划更新 项目文件更新 组资更新</p><p>范围管理就是管理做哪些事情。</p><p>为了便于区分输入输出，是【）代表输入，（】代表输出，【】代表过程，（）代表技术工具</p><p>【规划范围管理】：项目一开始肯定不知道要做什么，怎么做，首先要制定两个计划来做管理的依据，一个是（范围管理计划】另一个是（需求管理计划】，主要是想好怎么管理范围和需求，方法和编写的的依据直接看【项目管理计划）和【章程），不行的话看看【事因）和【组资）都是可以的。</p><p>【收集需求】：拿着【范围管理计划），【干系人管理计划）和【需求管理计划）找客户收需求，记跟踪。首先要找到相关人包括客户、投资人【干系人登记册）来了解需求，由于人太多，让相关人了解项目大概是什么最快办法就是让他们自己看【项目章程），然后得到他们的需求了，记在（需求文件】里面，为了不浪费太多时间，同时把如何跟踪需求（需求跟踪矩阵】也做好了。</p><p>【定义范围】：第二步就是定义项目的边界了，按照【项目管理计划）的要求同时【项目章程）本来就提了点项目大概要做什么，就对照【需求文件）直接在上面改，省时省力，同时看看【组资）可有借鉴的地方，一下子就加工成一个文档了（项目范围说明书】，酷！</p><p>【创建WBS】：然后就是细分事情，创建WBS，对照【需求文件）拿【项目范围说明书）开刀，你要什么我就给你分什么，最后分解成（WBS】和（WBS词典】，然后把项目范围说明书、WBS和WBS词典一起装订起来又成了一个新重要基准文档（范围基准】，竟然可以这样写文档，真可谓天下文章一大抄啊。</p><p>【确认范围】：下一步是核实做的事情结果是否在工作范围之内，首先要通过【需求跟踪矩阵）去保持和提出需求的人的联系，确定工作范围有没有变，然后对照【需求文档）去核实做的事情【核实的可交付成果）的范围了，核实没有问题的话就可以验收这个事情了（验收的可交付成果】，有问题就产生一个（变更请求】，同时根据这期间的【工作绩效数据）生成新的（工作绩效信息】。</p><p>【控制范围】：控制范围是控制做的事情过程是否在工作范围之内，首先还是要通过【需求跟踪矩阵）去保持和提出需求的人的联系，确定工作范围有没有变。既然是控制过程本身，那就要用到每日收集的工作状况【工作绩效信息），再对照【需求文件）得到工作做出的效果如何（项目绩效信息】，有问题就产生一个（变更请求】，同时把（项目管理计划】，（项目文件】，（组资】更新下。</p><p>从技术工具层面上说，</p><p>收集需求要面对那么多人，自然少不了方法，人不多可以访谈，多了点就分焦点小组，意见不同意引导研讨一下，人再多就发挥群体创新和决策能力，人再再多就问卷调查了，遇到有些人不太爱说就观察，说不清楚的干脆做个模型出来看看</p><p>定义范围就是定义要做的事情，也就是最终产品就是这样了，所以好方法应该是找个现在市面上类似的产品分析一下，简单高效，分析的时候要多用点备选方案来识别，保险起见，再开个引导式研讨会，请客户一起来分析</p><p>创建WBS就是分解，一层层分解到活动</p><p>核实范围是查东西好不好，就是拿着最终东西翻来覆去的检查</p><p>控制范围是查过程好不好，进行偏差分析，来工作绩效信息和需求文档一一比较是否有偏差</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;范围管理ITTO&quot;&gt;&lt;a href=&quot;#范围管理ITTO&quot; class=&quot;headerlink&quot; title=&quot;范
      
    
    </summary>
    
    
      <category term="信息系统项目管理" scheme="http://www.ljchengx.cn/categories/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="ITTO" scheme="http://www.ljchengx.cn/tags/ITTO/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins参数化构建Android项目支持上传蒲公英</title>
    <link href="http://www.ljchengx.cn/2020/07/23/Jenkins%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BAAndroid%E9%A1%B9%E7%9B%AE%E6%94%AF%E6%8C%81%E4%B8%8A%E4%BC%A0%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
    <id>http://www.ljchengx.cn/2020/07/23/Jenkins%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BAAndroid%E9%A1%B9%E7%9B%AE%E6%94%AF%E6%8C%81%E4%B8%8A%E4%BC%A0%E8%92%B2%E5%85%AC%E8%8B%B1/</id>
    <published>2020-07-23T12:20:12.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h4 id="一、新建一个自由风格的任务，进入配置项-General选择参数化构建过程"><a href="#一、新建一个自由风格的任务，进入配置项-General选择参数化构建过程" class="headerlink" title="一、新建一个自由风格的任务，进入配置项 General选择参数化构建过程"></a>一、新建一个自由风格的任务，进入配置项 General选择参数化构建过程</h4><h5 id="1-新增选择选项参数"><a href="#1-新增选择选项参数" class="headerlink" title="1.新增选择选项参数"></a>1.新增选择选项参数</h5><p>BUILD_TYPE 设置debug release</p><p><img src="https://s1.ax1x.com/2020/07/23/UOr2aF.png" alt="UOr2aF.png"></p><p><img src="https://s1.ax1x.com/2020/07/23/UOspsP.png" alt="UOspsP.png"></p><h5 id="2-添加字符参数"><a href="#2-添加字符参数" class="headerlink" title="2.添加字符参数"></a>2.添加字符参数</h5><p>APP_VERSION_NAME APP_VERSION_CODE IS_JENKINS 如下图</p><p><img src="https://s1.ax1x.com/2020/07/23/UOs8JJ.png" alt="UOs8JJ.png"></p><p><img src="https://s1.ax1x.com/2020/07/23/UOsloF.png" alt="UOsloF.png"></p><p><img src="https://s1.ax1x.com/2020/07/23/UOs3i4.png" alt="UOs3i4.png"></p><h5 id="3-项目代码调整"><a href="#3-项目代码调整" class="headerlink" title="3.项目代码调整"></a>3.项目代码调整</h5><p>这里设置后如何在项目代码中使用，我们需要在项目的gradle.properties文件下新增刚才添加的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BUILD_TYPE  APP_VERSION_NAME  APP_VERSION_CODE IS_JENKINS</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/07/23/UOs6SA.png" alt="UOs6SA.png"></p><p>然后修改app下的build.gradle来使用这些参数 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">        minSdkVersion 19</span><br><span class="line">        targetSdkVersion 29</span><br><span class="line">        versionCode APP_VERSION_CODE as int</span><br><span class="line">        versionName APP_VERSION_NAME</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回到Jenkins下构建命令修改成使用参数的形式 assemble${BUILD_TYPE}，展开勾选</p><p>Pass all job parameters as Project properties</p><p><img src="https://s1.ax1x.com/2020/07/23/UOs7Ss.png" alt="UOs7Ss.png"><br><img src="https://s1.ax1x.com/2020/07/23/UOsHln.png" alt="UOsHln.png"></p><p>保存完成，开始打包。</p><p><img src="https://s1.ax1x.com/2020/07/23/UO6jG4.png" alt="UO6jG4.png"></p><h4 id="二、打包完成自动上传蒲公英"><a href="#二、打包完成自动上传蒲公英" class="headerlink" title="二、打包完成自动上传蒲公英"></a>二、打包完成自动上传蒲公英</h4><h5 id="1-安装蒲公英插件"><a href="#1-安装蒲公英插件" class="headerlink" title="1.安装蒲公英插件"></a>1.安装蒲公英插件</h5><p>前往插件管理，搜索<a href="https://plugins.jenkins.io/upload-pgyer" target="_blank" rel="noopener"> Upload to pgyer</a> 完成安装。</p><h5 id="2-增加构建后操作步骤-新增归档成品"><a href="#2-增加构建后操作步骤-新增归档成品" class="headerlink" title="2.增加构建后操作步骤 新增归档成品"></a>2.增加构建后操作步骤 新增归档成品</h5><p>地址填写自己的打包后的地址(方便执行完成后 可以展示出apk)</p><p>app/build/outputs/apk/${BUILD_TYPE}/*.apk</p><p><img src="https://s1.ax1x.com/2020/07/23/UORsfS.png" alt="UORsfS.png"></p><h5 id="3-新增upload-to-pgyer-with-apiV1"><a href="#3-新增upload-to-pgyer-with-apiV1" class="headerlink" title="3.新增upload to pgyer with apiV1"></a>3.新增upload to pgyer with apiV1</h5><p>两个Key根据自己的账号填写</p><p>${WORKSPACE}/app/build/outputs/apk/${BUILD_TYPE}</p><p>app-${BUILD_TYPE}.apk</p><p><img src="https://s1.ax1x.com/2020/07/23/UOWa3F.png" alt="UOWa3F.png"><br><img src="https://s1.ax1x.com/2020/07/23/UOWU9U.png" alt="UOWU9U.png"></p><h5 id="4-展示蒲公英下载二维码"><a href="#4-展示蒲公英下载二维码" class="headerlink" title="4.展示蒲公英下载二维码"></a>4.展示蒲公英下载二维码</h5><p>安装插件<a href="https://plugins.jenkins.io/description-setter" target="_blank" rel="noopener">description setter plugin</a></p><p>回到增加构建后步骤 set build description</p><p><img src="https://s1.ax1x.com/2020/07/23/UOfwPf.png" alt="UOfwPf.png"></p><p>填写如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;$&#123;appBuildURL&#125;&quot;&gt;&lt;img src&#x3D;&quot;$&#123;appQRCodeURL&#125;&quot; width&#x3D;&quot;118px&quot; height&#x3D;&quot;118px&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/07/23/UOffiV.png" alt="UOffiV.png"></p><p>保存后进入首页系统管理的全局安全管理 修改格式器为safe html 保存，然后重新打包项目。</p><p><img src="https://s1.ax1x.com/2020/07/23/UOheSS.png" alt="UOheSS.png"></p><p><img src="https://s1.ax1x.com/2020/07/23/UOhVW8.png" alt="UOhVW8.png"></p><p>打包完成后就能在界面看见下载二维码和构建结果。</p><p><img src="https://s1.ax1x.com/2020/07/23/UOhQwn.png" alt="UOhQwn.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;一、新建一个自由风格的任务，进入配置项-General选择参数化构建过程&quot;&gt;&lt;a href=&quot;#一、新建一个自由风
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ljchengx.cn/categories/Android/"/>
    
    
      <category term="jenkins" scheme="http://www.ljchengx.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Liunx服务器部署Jenkins打包Android Apk</title>
    <link href="http://www.ljchengx.cn/2020/07/21/Liunx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Jenkins%E6%89%93%E5%8C%85AndroidApk/"/>
    <id>http://www.ljchengx.cn/2020/07/21/Liunx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Jenkins%E6%89%93%E5%8C%85AndroidApk/</id>
    <published>2020-07-21T12:20:12.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h2 id="Liunx服务器部署Jenkins打包Android-Apk"><a href="#Liunx服务器部署Jenkins打包Android-Apk" class="headerlink" title="Liunx服务器部署Jenkins打包Android Apk"></a>Liunx服务器部署Jenkins打包Android Apk</h2><h3 id="一-安装JAVA环境"><a href="#一-安装JAVA环境" class="headerlink" title="一.安装JAVA环境"></a>一.安装JAVA环境</h3><h4 id="1-下载JDK"><a href="#1-下载JDK" class="headerlink" title="1.下载JDK"></a>1.下载JDK</h4><p>​ 根据情况下载JDK版本 目前本教程使用的jdk8 也可以自行前往下载页面: <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>. 这里要看下自己的服务器系统是32位还是64位，按照所需下载即可，建议下载后缀为tar.gz压缩格式的安装包。下载后上传到服务器上，通过命令 tar -zxvf jdk-8u261-linux-i586.tar.gz 即可。</p><h4 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>打开到最后加上JAVA_HOME环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_261</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>执行命令使环境变量生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h3 id="二-安装GRADLE环境"><a href="#二-安装GRADLE环境" class="headerlink" title="二.安装GRADLE环境"></a>二.安装GRADLE环境</h3><h4 id="1-下载GRADLE"><a href="#1-下载GRADLE" class="headerlink" title="1.下载GRADLE"></a>1.下载GRADLE</h4><p>​ 根据项目中使用的gradle版本下载对应文件 下载地址:<a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a></p><p>这里使用的是 gradle-5.4.1-all.zip，下载后上传到服务器 这里放的是/usr/local/gradle 路径下(根据自己的情况来)，解压 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip gradle-5.4.1-all.zip</span><br></pre></td></tr></table></figure><h4 id="2-配置环境变量-1"><a href="#2-配置环境变量-1" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h4><p>打开文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>文件最后加上(可以和JAVA_HOME放一起)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GRADLE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;gradle&#x2F;gradle-5.4.1</span><br><span class="line">export PATH&#x3D;$&#123;GRADLE_HOME&#125;&#x2F;bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p>然后执行生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h3 id="三-安装AndroidSDK"><a href="#三-安装AndroidSDK" class="headerlink" title="三.安装AndroidSDK"></a>三.安装AndroidSDK</h3><h4 id="1-下载AndroidSDK"><a href="#1-下载AndroidSDK" class="headerlink" title="1.下载AndroidSDK"></a>1.下载AndroidSDK</h4><p>​ 打开网址：<a href="https://developer.android.google.cn/studio" target="_blank" rel="noopener">https://developer.android.google.cn/studio</a></p><p>找到Command line tools only 标题下的SDK tools package 下载Linux包</p><p><img src="https://s1.ax1x.com/2020/07/22/U7DjG6.png" alt="U7DjG6.png"></p><p>下载完成后上传服务器 /opt/android(路径根据自己情况来 可以和gradle放一起)。完成解压 unzip xxx</p><p><img src="https://s1.ax1x.com/2020/07/22/UHSl7D.png" alt="UHSl7D.png"></p><p>正常解压后只有这一个文件夹，OK 我们这个时候先去配置下环境</p><p>打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>和上面一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME&#x3D;&#x2F;opt&#x2F;android&#x2F;sdk</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME:$ANDROID_HOME&#x2F;tools:$ANDROID_HOME&#x2F;platform-tools:$ANDROID_HOME&#x2F;tools&#x2F;bin</span><br></pre></td></tr></table></figure><p>配置Android_home</p><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>这个时候来到刚才只有tools这一层文件夹</p><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdkmanager --list</span><br></pre></td></tr></table></figure><p>应该会出现下图这样的表格</p><p><img src="https://s1.ax1x.com/2020/07/22/UHpkKP.png" alt="UHpkKP.png"></p><p>这个时候就根据当前项目需要的版本来进行安装就可以。</p><p>比如当前项目需要 build-tools:29.0.2 ，platforms;android-28 ，ndk;21.3.6528147</p><p>例如执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sdkmanager &quot;platform-tools&quot;</span><br><span class="line">sdkmanager &quot;build-tools:29.0.2&quot;</span><br><span class="line">sdkmanager &quot;platforms;android-28&quot;</span><br><span class="line">sdkmanager &quot;ndk;21.3.6528147&quot;</span><br></pre></td></tr></table></figure><p>等需要的版本都安装好以后当前文件夹下就会出现如上面那个图。</p><p>到此需要的环境变量全部安装完成。</p><h3 id="四-安装Jenkins"><a href="#四-安装Jenkins" class="headerlink" title="四.安装Jenkins"></a>四.安装Jenkins</h3><h4 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h4><p>​ 前往：<a href="http://pkg.jenkins-ci.org/redhat-stable/" target="_blank" rel="noopener">http://pkg.jenkins-ci.org/redhat-stable/</a> 例如下载：jenkins-2.222.1-1.1.noarch.rpm 上传到服务器上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jenkins-2.222.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><p>完成安装。</p><h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;jenkins</span><br></pre></td></tr></table></figure><p>可以根据自己的需要改变端口，原来的是8080 。</p><p>基本上安装完成了可以访问下服务器ip:8080是不是通了，</p><p>如果没有通查看问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure><p>如果是java环境问题可以替换自己的路径</p><p>修改java配置： vi /etc/init.d/jenkins 修改为自己java路径</p><p>然后启动service jenkins start</p><p>第一次打来jenkins的时候，有个初始化密码，需要你输入。</p><p>密码在服务器的 cd /var/lib/jenkins/secrets</p><h3 id="五-开始打包"><a href="#五-开始打包" class="headerlink" title="五.开始打包"></a>五.开始打包</h3><p>1.打开jenkins系统管理下的系统配置，完成以下三个参数的配置</p><p>ANDROID_HOME</p><p>/usr/share/android-sdk</p><p>GRADLE_USER_HOME</p><p>/usr/local/gradle/gradle-5.4.1</p><p>JAVA_HOME</p><p>/usr/local/java/jdk1.8.0_261</p><p>这三个路径在上面服务器的环境变量里保持一致</p><p><img src="https://s1.ax1x.com/2020/07/22/UHe6C6.png" alt="UHe6C6.png"></p><p>2.安装Gradle插件 成功后进入系统管理的全局工具配置</p><p><a href="https://imgchr.com/i/UHmaJP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/22/UHmaJP.png" alt="UHmaJP.png"></a></p><p>这里地址也是上面服务器的环境变量配置。</p><p>3.新建一个任务</p><p><a href="https://imgchr.com/i/UHnKTs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/22/UHnKTs.png" alt="UHnKTs.png"></a></p><p>源码管理根据自己的需要 默认有git</p><p><a href="https://imgchr.com/i/UHnfAA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/22/UHnfAA.png" alt="UHnfAA.png"></a></p><p>没有svn的去插件管理安装下subversion</p><p>然后新增构建步骤</p><p><img src="https://s1.ax1x.com/2020/07/22/UHungK.png" alt="UHungK.png"></p><p><a href="https://imgchr.com/i/UHuwDg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/22/UHuwDg.png" alt="UHuwDg.png"></a></p><p>1位置选择刚才设置的全局参数 2位置选择你的执行命令 可以空格分开</p><p>点击保存回到首页就可以构建了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;Liunx服务器部署Jenkins打包Android-Apk&quot;&gt;&lt;a href=&quot;#Liunx服务器部署Jenki
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ljchengx.cn/categories/Android/"/>
    
    
      <category term="jenkins" scheme="http://www.ljchengx.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组</title>
    <link href="http://www.ljchengx.cn/2020/07/18/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <id>http://www.ljchengx.cn/2020/07/18/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-18T07:39:59.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --><h2 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h2><p>给定一个数组，将数组中的元素向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5,6,7] 和 k &#x3D; 3</span><br><span class="line">输出: [5,6,7,1,2,3,4]</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: [7,1,2,3,4,5,6]</span><br><span class="line">向右旋转 2 步: [6,7,1,2,3,4,5]</span><br><span class="line">向右旋转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure><h6 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                index = nums[nums.length - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    nums[i] = nums[i-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                nums[<span class="number">0</span>] = index;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;旋转数组&quot;&gt;&lt;a href=&quot;#旋转数组&quot; class=&quot;headerlink&quot; title=&quot;旋转数组&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.ljchengx.cn/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="http://www.ljchengx.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>删除排序数组中的重复项</title>
    <link href="http://www.ljchengx.cn/2020/07/18/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://www.ljchengx.cn/2020/07/18/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2020-07-18T07:30:26.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --><h2 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h2><p>给定一个排序数组，你需要在<strong><a href="http://baike.baidu.com/item/原地算法" target="_blank" rel="noopener"> 原地</a></strong> 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/原地算法" target="_blank" rel="noopener">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h6 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != nums[i]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;删除排序数组中的重复项&quot;&gt;&lt;a href=&quot;#删除排序数组中的重复项&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.ljchengx.cn/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="http://www.ljchengx.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>记一次关于LitePal数据库的使用</title>
    <link href="http://www.ljchengx.cn/2020/03/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8ELitePal%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.ljchengx.cn/2020/03/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8ELitePal%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-28T05:58:19.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --><h4 id="1-原因描述："><a href="#1-原因描述：" class="headerlink" title="1.原因描述："></a>1.原因描述：</h4><p>项目过程中需要使用本地数据库来保存一些临时数据，方便下次读取使用。发现了LitePal这个库，于是记录下使用的过程，LitePal这个库是郭霖大神写的,下面就是集成知识简单的使用,如果有什么不对的地方望指出。</p><h4 id="2-尝试方法："><a href="#2-尝试方法：" class="headerlink" title="2.尝试方法："></a>2.尝试方法：</h4><h5 id="2-1-LitePal库的集成"><a href="#2-1-LitePal库的集成" class="headerlink" title="2.1 LitePal库的集成"></a>2.1 LitePal库的集成</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation  <span class="string">'org.litepal.android:java:3.0.0'</span></span><br></pre></td></tr></table></figure><h5 id="2-2-创建litepal-xml文件"><a href="#2-2-创建litepal-xml文件" class="headerlink" title="2.2 创建litepal.xml文件"></a>2.2 创建litepal.xml文件</h5><p>在你的项目<strong>assets</strong> 下添加litepal.xml 这一步主要的是完成数据库相关配置 如名称，版本和表。</p><p><img src="https://s1.ax1x.com/2020/03/28/GkdEM8.png" alt="GkdEM8.png"></p><h5 id="2-3-初始化数据库配置"><a href="#2-3-初始化数据库配置" class="headerlink" title="2.3 初始化数据库配置"></a>2.3 初始化数据库配置</h5><p>这里两种方式第一个是让你的<strong>AndroidManifest.xml</strong> 直接使用org.litepal.LitePalApplication 或者在你自己的Application中加上 LitePal.initialize(this);</p><h5 id="2-4-建表"><a href="#2-4-建表" class="headerlink" title="2.4 建表"></a>2.4 建表</h5><p><img src="https://s1.ax1x.com/2020/03/28/Gkw1kd.md.png" alt="Gkw1kd.md.png"></p><p>这里注意新增的表一定要在litepal.xml文件的list下面添加才可以。</p><h5 id="2-5-插入数据"><a href="#2-5-插入数据" class="headerlink" title="2.5 插入数据"></a>2.5 插入数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ExampleModel exampleModel = <span class="keyword">new</span> ExampleModel();</span><br><span class="line">    exampleModel.setKey(<span class="string">"123"</span>);</span><br><span class="line">    exampleModel.setContent(<span class="string">"456"</span>);</span><br><span class="line">    exampleModel.saveAsync().listen(<span class="keyword">new</span> SaveCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(<span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(success)&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"数据库保存成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了异步保存的方法 也可以直接使用save()方法。</p><h5 id="2-6-查询数据"><a href="#2-6-查询数据" class="headerlink" title="2.6 查询数据"></a>2.6 查询数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据Id查询</span></span><br><span class="line">    ExampleModel exampleModel = LitePal.find(ExampleModel<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据条件查询</span></span><br><span class="line">    List&lt;ExampleModel&gt; exampleModels = LitePal.where(<span class="string">"key  = ? "</span>, <span class="string">"123"</span>).find(ExampleModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的查询方式，还有更加详细的方式可以看看官方的文档。</p><h5 id="2-7-删除数据"><a href="#2-7-删除数据" class="headerlink" title="2.7 删除数据"></a>2.7 删除数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    LitePal.delete(ExampleModel<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">    LitePal.deleteAll(ExampleModel.class, "key = ?" , "350");</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-参考链接："><a href="#5-参考链接：" class="headerlink" title="5.参考链接："></a>5.参考链接：</h4><ul><li><a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">https://github.com/LitePalFramework/LitePal</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:59 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;1-原因描述：&quot;&gt;&lt;a href=&quot;#1-原因描述：&quot; class=&quot;headerlink&quot; title=&quot;1.原
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ljchengx.cn/categories/Android/"/>
    
    
      <category term="LitePal" scheme="http://www.ljchengx.cn/tags/LitePal/"/>
    
      <category term="数据库" scheme="http://www.ljchengx.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Android处理okhttp3请求添加公共参数</title>
    <link href="http://www.ljchengx.cn/2020/03/28/Android%E5%A4%84%E7%90%86okhttp3%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%85%B1%E5%8F%82%E6%95%B0/"/>
    <id>http://www.ljchengx.cn/2020/03/28/Android%E5%A4%84%E7%90%86okhttp3%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%85%B1%E5%8F%82%E6%95%B0/</id>
    <published>2020-03-28T02:07:37.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h4 id="1-问题描述："><a href="#1-问题描述：" class="headerlink" title="1.问题描述："></a>1.问题描述：</h4><p>由于前期项目没有增加移动端接口相关埋点信息，于是现在需要在调用相关的接口做公共参数的发送，服务端可以根据这部分固定的参数来增加埋点信息的处理。</p><h4 id="2-解决思路："><a href="#2-解决思路：" class="headerlink" title="2.解决思路："></a>2.解决思路：</h4><p>由于字段统一而且牵扯到的接口很多，如果一个一个处理的话工作量太大，而且后面如果新增接口还需要添加固定的这几个参数，如果牵扯修改的话，会更加麻烦。于是考虑okhttp3的拦截器去统一处理。</p><h4 id="3-遇到的问题："><a href="#3-遇到的问题：" class="headerlink" title="3.遇到的问题："></a>3.遇到的问题：</h4><p>开始处理的方式是获取url通过addQueryParameter方式来添加上，然后发现效果不是想要的，这样的方式会把参数直接加到url后面，而不是我们希望的加到已有参数的后面。于是继续探究。</p><h4 id="4-解决方式："><a href="#4-解决方式：" class="headerlink" title="4.解决方式："></a>4.解决方式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ProjectName</span>: trunk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: urlInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: okhttp3拦截器新增公共参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ljchengx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span>: 2020/3/26 17:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Request request = chain.request();</span><br><span class="line"></span><br><span class="line">        Request.Builder requestBuilder = request.newBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (request.body() <span class="keyword">instanceof</span> FormBody) &#123;</span><br><span class="line">            FormBody.Builder newFormBody = <span class="keyword">new</span> FormBody.Builder();</span><br><span class="line">            FormBody oldFormBody = (FormBody) request.body();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldFormBody.size(); i++) &#123;</span><br><span class="line">                newFormBody.addEncoded(oldFormBody.encodedName(i), oldFormBody.encodedValue(i));</span><br><span class="line">            &#125;</span><br><span class="line">            newFormBody.add(<span class="string">"equipmentModel"</span>, Build.MODEL);</span><br><span class="line">            newFormBody.add(<span class="string">"equipmentApiVersion"</span>, Build.VERSION.SDK_INT+<span class="string">""</span>);</span><br><span class="line">            requestBuilder.method(request.method(), newFormBody.build());</span><br><span class="line">        &#125;</span><br><span class="line">        Request newRequest = requestBuilder.build();</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(newRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-参考链接："><a href="#5-参考链接：" class="headerlink" title="5.参考链接："></a>5.参考链接：</h4><p>-</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;1-问题描述：&quot;&gt;&lt;a href=&quot;#1-问题描述：&quot; class=&quot;headerlink&quot; title=&quot;1.问
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ljchengx.cn/categories/Android/"/>
    
    
      <category term="拦截器" scheme="http://www.ljchengx.cn/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
      <category term="公共参数" scheme="http://www.ljchengx.cn/tags/%E5%85%AC%E5%85%B1%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android处理Cookie过期静默更新</title>
    <link href="http://www.ljchengx.cn/2020/03/21/Android%E5%A4%84%E7%90%86Cookie%E8%BF%87%E6%9C%9F%E9%9D%99%E9%BB%98%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.ljchengx.cn/2020/03/21/Android%E5%A4%84%E7%90%86Cookie%E8%BF%87%E6%9C%9F%E9%9D%99%E9%BB%98%E6%9B%B4%E6%96%B0/</id>
    <published>2020-03-21T07:44:34.000Z</published>
    <updated>2021-03-09T07:51:38.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --><h4 id="1-问题描述："><a href="#1-问题描述：" class="headerlink" title="1.问题描述："></a>1.问题描述：</h4><p>​ 项目中在请求接口时在header上带上Cookie信息 一直没有处理过期时间，最近需要在原来的基础上添加请求Cookie过期后静默更新的功能。目前使用的是retrofit2+okhttp3+rxjava2的网络框架。</p><h4 id="2-解决思路："><a href="#2-解决思路：" class="headerlink" title="2.解决思路："></a>2.解决思路：</h4><p>​ 因为添加Cookie使用的是Okhttp3的拦截器处理的方式 需要准备在之前的Interceptor上面改造，其实处理起来也不是很复杂，需要确定的思路是在请求是做统一拦截，根据和服务端约定好的规则来判断是否处理Cookie过期，如果过期之前需要在同步请求一个新的接口拿到最新的Cookie信息放到原来的请求上，重新完成请求。</p><h4 id="3-遇到的问题："><a href="#3-遇到的问题：" class="headerlink" title="3.遇到的问题："></a>3.遇到的问题：</h4><p>需要和服务端协调好规则，如何判断失效，同时需要注意要重写一个新的请求</p><h4 id="4-解决方式："><a href="#4-解决方式：" class="headerlink" title="4.解决方式："></a>4.解决方式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCookiesInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line">    <span class="keyword">private</span> String resultStr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddCookiesInterceptor</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Request.Builder builder = chain.request().newBuilder();</span><br><span class="line">        <span class="comment">//这里使用本地存的cookie来添加到每个请求的header 方式有很多  如本地数据库保存 这里举一个例子</span></span><br><span class="line">        String cookie = CookieSp.get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(cookie)) &#123;</span><br><span class="line">            builder.addHeader(<span class="string">"Cookie"</span>, cookie);</span><br><span class="line">        &#125;</span><br><span class="line">        Request request = builder.build();</span><br><span class="line">        Response response = chain.proceed(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否Cookie过期</span></span><br><span class="line">        <span class="keyword">if</span> (isCookieExpired(response)) &#123;</span><br><span class="line"></span><br><span class="line">            KLog.e(<span class="string">"AddCookiesInterceptor"</span>, <span class="string">"无感刷新Cookie,然后重新请求数据"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//同步请求方式，获取最新的Cookie</span></span><br><span class="line">            String newCookie = getNewCookie();</span><br><span class="line">            KLog.e(<span class="string">"AddCookiesInterceptor"</span>, newCookie+<span class="string">"新Cookie"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用新的Cookie，创建新的请求</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != newCookie &amp;&amp; newCookie.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Request newRequest = chain.request()</span><br><span class="line">                        .newBuilder()</span><br><span class="line">                        .header(<span class="string">"Cookie"</span>, newCookie)</span><br><span class="line">                        .build();</span><br><span class="line">                <span class="comment">//重新请求上次的接口</span></span><br><span class="line">                <span class="keyword">return</span> chain.proceed(newRequest.newBuilder().build());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  获取新的Cookie</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getNewCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据服务端约定好的新接口 获取新的Cookie</span></span><br><span class="line">        String url = HttpConstant.BASE_URL + <span class="string">"/api/login/newlogin?userName=123&amp;pwd=123"</span>;</span><br><span class="line"></span><br><span class="line">        KLog.e(<span class="string">"AddCookiesInterceptor"</span>, <span class="string">"重新请求---"</span> + url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新建立一个请求</span></span><br><span class="line">        HttpsUtils.SSLParams sslParams = HttpsUtils.getSslSocketFactory();</span><br><span class="line">        OkHttpClient client =  <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">                .hostnameVerifier(HttpsUtils.UnSafeHostnameVerifier)</span><br><span class="line">                .sslSocketFactory(sslParams.sSLSocketFactory, sslParams.trustManager)</span><br><span class="line">                .connectionPool(<span class="keyword">new</span> ConnectionPool(<span class="number">8</span>, <span class="number">10</span>, TimeUnit.SECONDS))</span><br><span class="line">                .build();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">        okhttp3.Call call = client.newCall(request);</span><br><span class="line">        StringBuffer cookie = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = call.execute();</span><br><span class="line">            RequestCode data = <span class="keyword">new</span> Gson().fromJson(response.body().string(), RequestCode<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里根据约定好的规则获取新的Cookie 这里是根据头部信息拿到新的Cookie 保存在本地</span></span><br><span class="line">            <span class="keyword">if</span> (data.getCode() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!response.headers(<span class="string">"Set-Cookie"</span>).isEmpty()) &#123;</span><br><span class="line">                    List&lt;String&gt; list = response.headers(<span class="string">"Set-Cookie"</span>);</span><br><span class="line">                    <span class="keyword">for</span> (String str :</span><br><span class="line">                            list) &#123;</span><br><span class="line">                        cookie.append(str).append(<span class="string">";"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    CookieSp.put(cookie.toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                KLog.e(<span class="string">"AddCookiesInterceptor"</span>, <span class="string">"新Cookie获取失败---退出登录"</span> );</span><br><span class="line">                AppManager.getAppManager().finishAllActivity();</span><br><span class="line">                <span class="comment">//这里处理你的退出重新登录的逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            KLog.e(<span class="string">"AddCookiesInterceptor"</span>,e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookie.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  根据返回值判断Cookie是否过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCookieExpired</span><span class="params">(Response response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultStr = response.body().string();</span><br><span class="line">            RequestCode requestCode = <span class="keyword">new</span> Gson().fromJson(resultStr, RequestCode<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            KLog.e(<span class="string">"AddCookiesInterceptor"</span>, requestCode.getCode() + <span class="string">"----requestCode"</span>);</span><br><span class="line">            <span class="comment">//根据服务端约定的规则来判断是否过期</span></span><br><span class="line">            <span class="keyword">if</span> (requestCode.getCode() == -<span class="number">300</span>) &#123;</span><br><span class="line">                KLog.e(<span class="string">"AddCookiesInterceptor"</span>, <span class="string">"----requestCode,Cookie登录过期了"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-参考链接："><a href="#5-参考链接：" class="headerlink" title="5.参考链接："></a>5.参考链接：</h4><ul><li><a href="https://www.jianshu.com/p/66b59ad1fdc1" target="_blank" rel="noopener">https://www.jianshu.com/p/66b59ad1fdc1</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 09 2021 15:51:58 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;1-问题描述：&quot;&gt;&lt;a href=&quot;#1-问题描述：&quot; class=&quot;headerlink&quot; title=&quot;1.问
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ljchengx.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.ljchengx.cn/tags/Android/"/>
    
      <category term="Cookie" scheme="http://www.ljchengx.cn/tags/Cookie/"/>
    
      <category term="拦截器" scheme="http://www.ljchengx.cn/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
</feed>
